// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.miracl.trust.flutter_miracl_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object PigeonPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class MVerificationMethod(val raw: Int) {
  FULL_CUSTOM(0),
  STANDARD_EMAIL(1);

  companion object {
    fun ofRaw(raw: Int): MVerificationMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MEmailVerificationMethod(val raw: Int) {
  CODE(0),
  LINK(1);

  companion object {
    fun ofRaw(raw: Int): MEmailVerificationMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MIdentityType(val raw: Int) {
  EMAIL(0),
  ALPHANUMERIC(1);

  companion object {
    fun ofRaw(raw: Int): MIdentityType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MSigningSessionStatus(val raw: Int) {
  ACTIVE(0),
  SIGNED(1);

  companion object {
    fun ofRaw(raw: Int): MSigningSessionStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConfigurationExceptionCode(val raw: Int) {
  EMPTY_PROJECT_ID(0);

  companion object {
    fun ofRaw(raw: Int): ConfigurationExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EmailVerificationExceptionCode(val raw: Int) {
  EMPTY_USER_ID(0),
  INVALID_SESSION_DETAILS(1),
  REQUEST_BACKOFF(2),
  VERIFICAITON_FAIL(3);

  companion object {
    fun ofRaw(raw: Int): EmailVerificationExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ActivationTokenExceptionCode(val raw: Int) {
  EMPTY_USER_ID(0),
  EMPTY_VERIFICATION_CODE(1),
  UNSUCCESSFUL_VERIFICATION(2),
  GET_ACTIVATION_TOKEN_FAIL(3);

  companion object {
    fun ofRaw(raw: Int): ActivationTokenExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class RegistrationExceptionCode(val raw: Int) {
  EMPTY_USER_ID(0),
  EMPTY_ACTIVATION_TOKEN(1),
  INVALID_ACTIVATION_TOKEN(2),
  REGISTRATION_FAIL(3),
  UNSUPPORTED_ELLIPTIC_CURVE(4),
  PIN_CANCELLED(5),
  INVALID_PIN(6),
  PROJECT_MISMATCH(7);

  companion object {
    fun ofRaw(raw: Int): RegistrationExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AuthenticationExceptionCode(val raw: Int) {
  INVALID_USER_DATA(0),
  INVALID_QRCODE(1),
  INVALID_PUSH_NOTIFICATION_PAYLOAD(2),
  USER_NOT_FOUND(3),
  INVALID_LINK(4),
  AUTHENTICATION_FAIL(5),
  REVOKED(6),
  INVALID_AUTHENTICATION_SESSION(7),
  UNSUCCESSFUL_AUTHENTICATION(8),
  PIN_CANCELLED(9),
  INVALID_PIN(10);

  companion object {
    fun ofRaw(raw: Int): AuthenticationExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class QuickCodeExceptionCode(val raw: Int) {
  REVOKED(0),
  UNSUCCESSFUL_AUTHENTICATION(1),
  PIN_CANCELLED(2),
  INVALID_PIN(3),
  LIMITED_QUICK_CODE_GENERATION(4),
  GENERATION_FAIL(5);

  companion object {
    fun ofRaw(raw: Int): QuickCodeExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AuthenticationSessionDetailsExceptionCode(val raw: Int) {
  INVALID_LINK(0),
  INVALID_QRCODE(1),
  INVALID_NOTIFICATION_PAYLOAD(2),
  INVALID_AUTHENTICATION_SESSION_DETAILS(3),
  GET_AUTHENTICATION_SESSION_DETAILS_FAIL(4),
  ABORT_SESSION_FAIL(5);

  companion object {
    fun ofRaw(raw: Int): AuthenticationSessionDetailsExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SigningSessionDetailsExceptionCode(val raw: Int) {
  INVALID_LINK(0),
  INVALID_QRCODE(1),
  INVALID_SIGNING_SESSION_DETAILS(2),
  GET_SIGNING_SESSION_DETAILS_FAIL(3),
  INVALID_SIGNING_SESSION(4),
  COMPLETE_SIGNING_SESSION_FAIL(5),
  ABORT_SIGNING_SESSION_FAIL(6);

  companion object {
    fun ofRaw(raw: Int): SigningSessionDetailsExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SigningExceptionCode(val raw: Int) {
  EMPTY_MESSAGE_HASH(0),
  EMPTY_PUBLIC_KEY(1),
  INVALID_USER_DATA(2),
  PIN_CANCELLED(3),
  INVALID_PIN(4),
  SIGNING_FAIL(5),
  REVOKED(6),
  UNSUCCESSFUL_AUTHENTICATION(7),
  INVALID_SIGNING_SESSION(8),
  INVALID_SIGNING_SESSION_DETAILS(9);

  companion object {
    fun ofRaw(raw: Int): SigningExceptionCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MConfiguration (
  val projectId: String,
  val applicationInfo: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MConfiguration {
      val projectId = pigeonVar_list[0] as String
      val applicationInfo = pigeonVar_list[1] as String
      return MConfiguration(projectId, applicationInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      projectId,
      applicationInfo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MConfiguration) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MActivationTokenResponse (
  val projectId: String,
  val accessId: String? = null,
  val userId: String,
  val activationToken: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MActivationTokenResponse {
      val projectId = pigeonVar_list[0] as String
      val accessId = pigeonVar_list[1] as String?
      val userId = pigeonVar_list[2] as String
      val activationToken = pigeonVar_list[3] as String
      return MActivationTokenResponse(projectId, accessId, userId, activationToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      projectId,
      accessId,
      userId,
      activationToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MActivationTokenResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MAuthenticationSessionDetails (
  val userId: String,
  val projectName: String,
  val projectLogoURL: String,
  val projectId: String,
  val pinLength: Long,
  val verificationMethod: MVerificationMethod,
  val verificationURL: String,
  val verificationCustomText: String,
  val identityTypeLabel: String,
  val quickCodeEnabled: Boolean,
  val limitQuickCodeRegistration: Boolean,
  val identityType: MIdentityType,
  val accessId: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MAuthenticationSessionDetails {
      val userId = pigeonVar_list[0] as String
      val projectName = pigeonVar_list[1] as String
      val projectLogoURL = pigeonVar_list[2] as String
      val projectId = pigeonVar_list[3] as String
      val pinLength = pigeonVar_list[4] as Long
      val verificationMethod = pigeonVar_list[5] as MVerificationMethod
      val verificationURL = pigeonVar_list[6] as String
      val verificationCustomText = pigeonVar_list[7] as String
      val identityTypeLabel = pigeonVar_list[8] as String
      val quickCodeEnabled = pigeonVar_list[9] as Boolean
      val limitQuickCodeRegistration = pigeonVar_list[10] as Boolean
      val identityType = pigeonVar_list[11] as MIdentityType
      val accessId = pigeonVar_list[12] as String
      return MAuthenticationSessionDetails(userId, projectName, projectLogoURL, projectId, pinLength, verificationMethod, verificationURL, verificationCustomText, identityTypeLabel, quickCodeEnabled, limitQuickCodeRegistration, identityType, accessId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      accessId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MAuthenticationSessionDetails) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MSigningSessionDetails (
  val userId: String,
  val projectName: String,
  val projectLogoURL: String,
  val projectId: String,
  val pinLength: Long,
  val verificationMethod: MVerificationMethod,
  val verificationURL: String,
  val verificationCustomText: String,
  val identityTypeLabel: String,
  val quickCodeEnabled: Boolean,
  val limitQuickCodeRegistration: Boolean,
  val identityType: MIdentityType,
  val sessionId: String,
  val signingHash: String,
  val signingDescription: String,
  val status: MSigningSessionStatus,
  val expireTime: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MSigningSessionDetails {
      val userId = pigeonVar_list[0] as String
      val projectName = pigeonVar_list[1] as String
      val projectLogoURL = pigeonVar_list[2] as String
      val projectId = pigeonVar_list[3] as String
      val pinLength = pigeonVar_list[4] as Long
      val verificationMethod = pigeonVar_list[5] as MVerificationMethod
      val verificationURL = pigeonVar_list[6] as String
      val verificationCustomText = pigeonVar_list[7] as String
      val identityTypeLabel = pigeonVar_list[8] as String
      val quickCodeEnabled = pigeonVar_list[9] as Boolean
      val limitQuickCodeRegistration = pigeonVar_list[10] as Boolean
      val identityType = pigeonVar_list[11] as MIdentityType
      val sessionId = pigeonVar_list[12] as String
      val signingHash = pigeonVar_list[13] as String
      val signingDescription = pigeonVar_list[14] as String
      val status = pigeonVar_list[15] as MSigningSessionStatus
      val expireTime = pigeonVar_list[16] as Long
      return MSigningSessionDetails(userId, projectName, projectLogoURL, projectId, pinLength, verificationMethod, verificationURL, verificationCustomText, identityTypeLabel, quickCodeEnabled, limitQuickCodeRegistration, identityType, sessionId, signingHash, signingDescription, status, expireTime)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      sessionId,
      signingHash,
      signingDescription,
      status,
      expireTime,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MSigningSessionDetails) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MUser (
  val projectId: String,
  val revoked: Boolean,
  val userId: String,
  val pinLength: Long,
  val hashedMpinId: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MUser {
      val projectId = pigeonVar_list[0] as String
      val revoked = pigeonVar_list[1] as Boolean
      val userId = pigeonVar_list[2] as String
      val pinLength = pigeonVar_list[3] as Long
      val hashedMpinId = pigeonVar_list[4] as String
      return MUser(projectId, revoked, userId, pinLength, hashedMpinId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      projectId,
      revoked,
      userId,
      pinLength,
      hashedMpinId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MUser) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MQuickCode (
  val code: String,
  val expiryTime: Long,
  val ttlSeconds: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MQuickCode {
      val code = pigeonVar_list[0] as String
      val expiryTime = pigeonVar_list[1] as Long
      val ttlSeconds = pigeonVar_list[2] as Long
      return MQuickCode(code, expiryTime, ttlSeconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      expiryTime,
      ttlSeconds,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MQuickCode) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MSignature (
  val u: String,
  val v: String,
  val dtas: String,
  val mpinId: String,
  val hash: String,
  val publicKey: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MSignature {
      val u = pigeonVar_list[0] as String
      val v = pigeonVar_list[1] as String
      val dtas = pigeonVar_list[2] as String
      val mpinId = pigeonVar_list[3] as String
      val hash = pigeonVar_list[4] as String
      val publicKey = pigeonVar_list[5] as String
      return MSignature(u, v, dtas, mpinId, hash, publicKey)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MSignature) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MSigningResult (
  val signature: MSignature,
  val timestamp: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MSigningResult {
      val signature = pigeonVar_list[0] as MSignature
      val timestamp = pigeonVar_list[1] as Long
      return MSigningResult(signature, timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      signature,
      timestamp,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MSigningResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MActivationTokenErrorResponse (
  val projectId: String,
  val accessId: String? = null,
  val userId: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MActivationTokenErrorResponse {
      val projectId = pigeonVar_list[0] as String
      val accessId = pigeonVar_list[1] as String?
      val userId = pigeonVar_list[2] as String
      return MActivationTokenErrorResponse(projectId, accessId, userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      projectId,
      accessId,
      userId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MActivationTokenErrorResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MEmailVerificationResponse (
  val backoff: Long,
  val emailVerificationMethod: MEmailVerificationMethod
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MEmailVerificationResponse {
      val backoff = pigeonVar_list[0] as Long
      val emailVerificationMethod = pigeonVar_list[1] as MEmailVerificationMethod
      return MEmailVerificationResponse(backoff, emailVerificationMethod)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      backoff,
      emailVerificationMethod,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MEmailVerificationResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MVerificationMethod.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MEmailVerificationMethod.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MIdentityType.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MSigningSessionStatus.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConfigurationExceptionCode.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          EmailVerificationExceptionCode.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ActivationTokenExceptionCode.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          RegistrationExceptionCode.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AuthenticationExceptionCode.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          QuickCodeExceptionCode.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AuthenticationSessionDetailsExceptionCode.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          SigningSessionDetailsExceptionCode.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          SigningExceptionCode.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MConfiguration.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MActivationTokenResponse.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MAuthenticationSessionDetails.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MSigningSessionDetails.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MUser.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MQuickCode.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MSignature.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MSigningResult.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MActivationTokenErrorResponse.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MEmailVerificationResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MVerificationMethod -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is MEmailVerificationMethod -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is MIdentityType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is MSigningSessionStatus -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is ConfigurationExceptionCode -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is EmailVerificationExceptionCode -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is ActivationTokenExceptionCode -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is RegistrationExceptionCode -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is AuthenticationExceptionCode -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is QuickCodeExceptionCode -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is AuthenticationSessionDetailsExceptionCode -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is SigningSessionDetailsExceptionCode -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is SigningExceptionCode -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is MConfiguration -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is MActivationTokenResponse -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is MAuthenticationSessionDetails -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is MSigningSessionDetails -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is MUser -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is MQuickCode -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is MSignature -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is MSigningResult -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is MActivationTokenErrorResponse -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is MEmailVerificationResponse -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MiraclSdk {
  fun initSdk(configuration: MConfiguration, callback: (Result<Unit>) -> Unit)
  fun setProjectId(projectId: String, callback: (Result<Unit>) -> Unit)
  fun sendVerificationEmail(userId: String, callback: (Result<MEmailVerificationResponse>) -> Unit)
  fun getActivationTokenByURI(uri: String, callback: (Result<MActivationTokenResponse>) -> Unit)
  fun getActivationTokenByUserIdAndCode(userId: String, code: String, callback: (Result<MActivationTokenResponse>) -> Unit)
  fun getUsers(callback: (Result<List<MUser>>) -> Unit)
  fun register(userId: String, activationToken: String, pin: String, pushToken: String?, callback: (Result<MUser>) -> Unit)
  fun authenticate(user: MUser, pin: String, callback: (Result<String>) -> Unit)
  fun delete(user: MUser, callback: (Result<Unit>) -> Unit)
  fun getUser(userId: String, callback: (Result<MUser?>) -> Unit)
  fun generateQuickCode(user: MUser, pin: String, callback: (Result<MQuickCode>) -> Unit)
  fun sign(user: MUser, message: ByteArray, pin: String, callback: (Result<MSigningResult>) -> Unit)
  fun authenticateWithQrCode(user: MUser, qrCode: String, pin: String, callback: (Result<Boolean>) -> Unit)
  fun authenticateWithLink(user: MUser, link: String, pin: String, callback: (Result<Boolean>) -> Unit)
  fun authenticateWithNotificationPayload(payload: Map<String, String>, pin: String, callback: (Result<Boolean>) -> Unit)
  fun getAuthenticationSessionDetailsFromQRCode(qrCode: String, callback: (Result<MAuthenticationSessionDetails>) -> Unit)
  fun getAuthenticationSessionDetailsFromLink(link: String, callback: (Result<MAuthenticationSessionDetails>) -> Unit)
  fun getAuthenticationSessionDetailsFromPushNofitifactionPayload(payload: Map<String, String>, callback: (Result<MAuthenticationSessionDetails>) -> Unit)
  fun getSigningDetailsFromQRCode(qrCode: String, callback: (Result<MSigningSessionDetails>) -> Unit)
  fun getSigningSessionDetailsFromLink(link: String, callback: (Result<MSigningSessionDetails>) -> Unit)

  companion object {
    /** The codec used by MiraclSdk. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `MiraclSdk` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: MiraclSdk?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.initSdk$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configurationArg = args[0] as MConfiguration
            api.initSdk(configurationArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(PigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.setProjectId$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val projectIdArg = args[0] as String
            api.setProjectId(projectIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(PigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sendVerificationEmail$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            api.sendVerificationEmail(userIdArg) { result: Result<MEmailVerificationResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByURI$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uriArg = args[0] as String
            api.getActivationTokenByURI(uriArg) { result: Result<MActivationTokenResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByUserIdAndCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val codeArg = args[1] as String
            api.getActivationTokenByUserIdAndCode(userIdArg, codeArg) { result: Result<MActivationTokenResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUsers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getUsers{ result: Result<List<MUser>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.register$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val activationTokenArg = args[1] as String
            val pinArg = args[2] as String
            val pushTokenArg = args[3] as String?
            api.register(userIdArg, activationTokenArg, pinArg, pushTokenArg) { result: Result<MUser> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val pinArg = args[1] as String
            api.authenticate(userArg, pinArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.delete$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            api.delete(userArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(PigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUser$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            api.getUser(userIdArg) { result: Result<MUser?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.generateQuickCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val pinArg = args[1] as String
            api.generateQuickCode(userArg, pinArg) { result: Result<MQuickCode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sign$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val messageArg = args[1] as ByteArray
            val pinArg = args[2] as String
            api.sign(userArg, messageArg, pinArg) { result: Result<MSigningResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithQrCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val qrCodeArg = args[1] as String
            val pinArg = args[2] as String
            api.authenticateWithQrCode(userArg, qrCodeArg, pinArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithLink$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val linkArg = args[1] as String
            val pinArg = args[2] as String
            api.authenticateWithLink(userArg, linkArg, pinArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithNotificationPayload$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val payloadArg = args[0] as Map<String, String>
            val pinArg = args[1] as String
            api.authenticateWithNotificationPayload(payloadArg, pinArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromQRCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val qrCodeArg = args[0] as String
            api.getAuthenticationSessionDetailsFromQRCode(qrCodeArg) { result: Result<MAuthenticationSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromLink$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val linkArg = args[0] as String
            api.getAuthenticationSessionDetailsFromLink(linkArg) { result: Result<MAuthenticationSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromPushNofitifactionPayload$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val payloadArg = args[0] as Map<String, String>
            api.getAuthenticationSessionDetailsFromPushNofitifactionPayload(payloadArg) { result: Result<MAuthenticationSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningDetailsFromQRCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val qrCodeArg = args[0] as String
            api.getSigningDetailsFromQRCode(qrCodeArg) { result: Result<MSigningSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningSessionDetailsFromLink$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val linkArg = args[0] as String
            api.getSigningSessionDetailsFromLink(linkArg) { result: Result<MSigningSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
