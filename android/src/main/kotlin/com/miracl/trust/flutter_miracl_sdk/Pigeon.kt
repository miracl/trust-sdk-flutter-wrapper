// Autogenerated from Pigeon (v9.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.miracl.trust.flutter_miracl_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class MConfiguration (
  val projectId: String,
  val clientId: String,
  val redirectUri: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MConfiguration {
      val projectId = list[0] as String
      val clientId = list[1] as String
      val redirectUri = list[2] as String
      return MConfiguration(projectId, clientId, redirectUri)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      projectId,
      clientId,
      redirectUri,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MActivationTokenResponse (
  val projectId: String,
  val accessId: String? = null,
  val userId: String,
  val activationToken: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MActivationTokenResponse {
      val projectId = list[0] as String
      val accessId = list[1] as String?
      val userId = list[2] as String
      val activationToken = list[3] as String
      return MActivationTokenResponse(projectId, accessId, userId, activationToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      projectId,
      accessId,
      userId,
      activationToken,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MAuthenticationSessionDetails (
  val userId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MAuthenticationSessionDetails {
      val userId = list[0] as String
      return MAuthenticationSessionDetails(userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MUser (
  val authenticationIdentityId: String,
  val projectId: String,
  val revoked: Boolean,
  val signingIdentityId: String,
  val userId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MUser {
      val authenticationIdentityId = list[0] as String
      val projectId = list[1] as String
      val revoked = list[2] as Boolean
      val signingIdentityId = list[3] as String
      val userId = list[4] as String
      return MUser(authenticationIdentityId, projectId, revoked, signingIdentityId, userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      authenticationIdentityId,
      projectId,
      revoked,
      signingIdentityId,
      userId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MQuickCode (
  val code: String,
  val expiryTime: Long,
  val nowTime: Long,
  val ttlSeconds: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MQuickCode {
      val code = list[0] as String
      val expiryTime = list[1].let { if (it is Int) it.toLong() else it as Long }
      val nowTime = list[2].let { if (it is Int) it.toLong() else it as Long }
      val ttlSeconds = list[3].let { if (it is Int) it.toLong() else it as Long }
      return MQuickCode(code, expiryTime, nowTime, ttlSeconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      expiryTime,
      nowTime,
      ttlSeconds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MSignature (
  val u: String,
  val v: String,
  val dtas: String,
  val mpinId: String,
  val hash: String,
  val publicKey: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MSignature {
      val u = list[0] as String
      val v = list[1] as String
      val dtas = list[2] as String
      val mpinId = list[3] as String
      val hash = list[4] as String
      val publicKey = list[5] as String
      return MSignature(u, v, dtas, mpinId, hash, publicKey)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MIdentity (
  val dtas: String,
  val id: String,
  val hashedMpinId: String,
  val mpinId: ByteArray,
  val pinLength: Long,
  val publicKey: ByteArray? = null,
  val token: ByteArray

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MIdentity {
      val dtas = list[0] as String
      val id = list[1] as String
      val hashedMpinId = list[2] as String
      val mpinId = list[3] as ByteArray
      val pinLength = list[4].let { if (it is Int) it.toLong() else it as Long }
      val publicKey = list[5] as ByteArray?
      val token = list[6] as ByteArray
      return MIdentity(dtas, id, hashedMpinId, mpinId, pinLength, publicKey, token)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      dtas,
      id,
      hashedMpinId,
      mpinId,
      pinLength,
      publicKey,
      token,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object MiraclSdkCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MActivationTokenResponse.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MAuthenticationSessionDetails.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MConfiguration.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MIdentity.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MQuickCode.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MSignature.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MUser.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MActivationTokenResponse -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MAuthenticationSessionDetails -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MConfiguration -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MIdentity -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MQuickCode -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is MSignature -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is MUser -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MiraclSdk {
  fun initSdk(configuration: MConfiguration, callback: (Result<Unit>) -> Unit)
  fun sendVerificationEmail(userId: String, callback: (Result<Boolean>) -> Unit)
  fun getActivationToken(uri: String, callback: (Result<MActivationTokenResponse>) -> Unit)
  fun getUsers(): List<MUser>
  fun register(userId: String, activationToken: String, pin: String, pushToken: String?, callback: (Result<MUser>) -> Unit)
  fun authenticate(user: MUser, pin: String, callback: (Result<String>) -> Unit)
  fun getAuthenticationSessionDetailsFromQRCode(qrCode: String, callback: (Result<MAuthenticationSessionDetails>) -> Unit)
  fun delete(userId: String, callback: (Result<Unit>) -> Unit)
  fun generateQuickCode(userId: String, pin: String, callback: (Result<MQuickCode>) -> Unit)
  fun signingRegister(userId: String, pin: String, callback: (Result<MUser>) -> Unit)
  fun sign(userId: String, pin: String, message: ByteArray, date: Long, callback: (Result<MSignature>) -> Unit)
  fun authenticateWithQrCode(userId: String, pin: String, qrCode: String, callback: (Result<Boolean>) -> Unit)
  fun getAuthenticationIdentity(userId: String, callback: (Result<MIdentity>) -> Unit)
  fun authenticateWithNotificationPayload(payload: Map<String, String>, pin: String, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MiraclSdk. */
    val codec: MessageCodec<Any?> by lazy {
      MiraclSdkCodec
    }
    /** Sets up an instance of `MiraclSdk` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MiraclSdk?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.initSdk", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configurationArg = args[0] as MConfiguration
            api.initSdk(configurationArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.sendVerificationEmail", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            api.sendVerificationEmail(userIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.getActivationToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uriArg = args[0] as String
            api.getActivationToken(uriArg) { result: Result<MActivationTokenResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.getUsers", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getUsers())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.register", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val activationTokenArg = args[1] as String
            val pinArg = args[2] as String
            val pushTokenArg = args[3] as String?
            api.register(userIdArg, activationTokenArg, pinArg, pushTokenArg) { result: Result<MUser> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.authenticate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as MUser
            val pinArg = args[1] as String
            api.authenticate(userArg, pinArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.getAuthenticationSessionDetailsFromQRCode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val qrCodeArg = args[0] as String
            api.getAuthenticationSessionDetailsFromQRCode(qrCodeArg) { result: Result<MAuthenticationSessionDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.delete", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            api.delete(userIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.generateQuickCode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val pinArg = args[1] as String
            api.generateQuickCode(userIdArg, pinArg) { result: Result<MQuickCode> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.signingRegister", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val pinArg = args[1] as String
            api.signingRegister(userIdArg, pinArg) { result: Result<MUser> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.sign", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val pinArg = args[1] as String
            val messageArg = args[2] as ByteArray
            val dateArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            api.sign(userIdArg, pinArg, messageArg, dateArg) { result: Result<MSignature> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.authenticateWithQrCode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            val pinArg = args[1] as String
            val qrCodeArg = args[2] as String
            api.authenticateWithQrCode(userIdArg, pinArg, qrCodeArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.getAuthenticationIdentity", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userIdArg = args[0] as String
            api.getAuthenticationIdentity(userIdArg) { result: Result<MIdentity> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MiraclSdk.authenticateWithNotificationPayload", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val payloadArg = args[0] as Map<String, String>
            val pinArg = args[1] as String
            api.authenticateWithNotificationPayload(payloadArg, pinArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
