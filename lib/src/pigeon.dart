// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum MVerificationMethod {
  fullCustom,
  standardEmail,
}

enum MEmailVerificationMethod {
  code,
  link,
}

enum MIdentityType {
  email,
  alphanumeric,
}

enum MSigningSessionStatus {
  active,
  signed,
}

enum ConfigurationExceptionCode {
  emptyProjectId,
}

enum EmailVerificationExceptionCode {
  emptyUserId,
  invalidSessionDetails,
  requestBackoff,
  verificaitonFail,
}

enum ActivationTokenExceptionCode {
  emptyUserId,
  emptyVerificationCode,
  unsuccessfulVerification,
  getActivationTokenFail,
}

enum RegistrationExceptionCode {
  emptyUserId,
  emptyActivationToken,
  invalidActivationToken,
  registrationFail,
  unsupportedEllipticCurve,
  pinCancelled,
  invalidPin,
  projectMismatch,
}

enum AuthenticationExceptionCode {
  invalidUserData,
  invalidQRCode,
  invalidPushNotificationPayload,
  userNotFound,
  invalidLink,
  authenticationFail,
  revoked,
  invalidAuthenticationSession,
  unsuccessfulAuthentication,
  pinCancelled,
  invalidPin,
}

enum QuickCodeExceptionCode {
  revoked,
  unsuccessfulAuthentication,
  pinCancelled,
  invalidPin,
  limitedQuickCodeGeneration,
  generationFail,
}

enum AuthenticationSessionDetailsExceptionCode {
  invalidLink,
  invalidQRCode,
  invalidNotificationPayload,
  invalidAuthenticationSessionDetails,
  getAuthenticationSessionDetailsFail,
  abortSessionFail,
}

enum SigningSessionDetailsExceptionCode {
  invalidLink,
  invalidQRCode,
  invalidSigningSessionDetails,
  getSigningSessionDetailsFail,
  invalidSigningSession,
  completeSigningSessionFail,
  abortSigningSessionFail,
}

enum SigningExceptionCode {
  emptyMessageHash,
  emptyPublicKey,
  invalidUserData,
  pinCancelled,
  invalidPin,
  signingFail,
  revoked,
  unsuccessfulAuthentication,
  invalidSigningSession,
  invalidSigningSessionDetails,
}

class MConfiguration {
  MConfiguration({
    required this.projectId,
    required this.applicationInfo,
  });

  String projectId;

  String applicationInfo;

  List<Object?> _toList() {
    return <Object?>[
      projectId,
      applicationInfo,
    ];
  }

  Object encode() {
    return _toList();  }

  static MConfiguration decode(Object result) {
    result as List<Object?>;
    return MConfiguration(
      projectId: result[0]! as String,
      applicationInfo: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MConfiguration || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MActivationTokenResponse {
  MActivationTokenResponse({
    required this.projectId,
    this.accessId,
    required this.userId,
    required this.activationToken,
  });

  String projectId;

  String? accessId;

  String userId;

  String activationToken;

  List<Object?> _toList() {
    return <Object?>[
      projectId,
      accessId,
      userId,
      activationToken,
    ];
  }

  Object encode() {
    return _toList();  }

  static MActivationTokenResponse decode(Object result) {
    result as List<Object?>;
    return MActivationTokenResponse(
      projectId: result[0]! as String,
      accessId: result[1] as String?,
      userId: result[2]! as String,
      activationToken: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MActivationTokenResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MAuthenticationSessionDetails {
  MAuthenticationSessionDetails({
    required this.userId,
    required this.projectName,
    required this.projectLogoURL,
    required this.projectId,
    required this.pinLength,
    required this.verificationMethod,
    required this.verificationURL,
    required this.verificationCustomText,
    required this.identityTypeLabel,
    required this.quickCodeEnabled,
    required this.limitQuickCodeRegistration,
    required this.identityType,
    required this.accessId,
  });

  String userId;

  String projectName;

  String projectLogoURL;

  String projectId;

  int pinLength;

  MVerificationMethod verificationMethod;

  String verificationURL;

  String verificationCustomText;

  String identityTypeLabel;

  bool quickCodeEnabled;

  bool limitQuickCodeRegistration;

  MIdentityType identityType;

  String accessId;

  List<Object?> _toList() {
    return <Object?>[
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      accessId,
    ];
  }

  Object encode() {
    return _toList();  }

  static MAuthenticationSessionDetails decode(Object result) {
    result as List<Object?>;
    return MAuthenticationSessionDetails(
      userId: result[0]! as String,
      projectName: result[1]! as String,
      projectLogoURL: result[2]! as String,
      projectId: result[3]! as String,
      pinLength: result[4]! as int,
      verificationMethod: result[5]! as MVerificationMethod,
      verificationURL: result[6]! as String,
      verificationCustomText: result[7]! as String,
      identityTypeLabel: result[8]! as String,
      quickCodeEnabled: result[9]! as bool,
      limitQuickCodeRegistration: result[10]! as bool,
      identityType: result[11]! as MIdentityType,
      accessId: result[12]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MAuthenticationSessionDetails || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MSigningSessionDetails {
  MSigningSessionDetails({
    required this.userId,
    required this.projectName,
    required this.projectLogoURL,
    required this.projectId,
    required this.pinLength,
    required this.verificationMethod,
    required this.verificationURL,
    required this.verificationCustomText,
    required this.identityTypeLabel,
    required this.quickCodeEnabled,
    required this.limitQuickCodeRegistration,
    required this.identityType,
    required this.sessionId,
    required this.signingHash,
    required this.signingDescription,
    required this.status,
    required this.expireTime,
  });

  String userId;

  String projectName;

  String projectLogoURL;

  String projectId;

  int pinLength;

  MVerificationMethod verificationMethod;

  String verificationURL;

  String verificationCustomText;

  String identityTypeLabel;

  bool quickCodeEnabled;

  bool limitQuickCodeRegistration;

  MIdentityType identityType;

  String sessionId;

  String signingHash;

  String signingDescription;

  MSigningSessionStatus status;

  int expireTime;

  List<Object?> _toList() {
    return <Object?>[
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      sessionId,
      signingHash,
      signingDescription,
      status,
      expireTime,
    ];
  }

  Object encode() {
    return _toList();  }

  static MSigningSessionDetails decode(Object result) {
    result as List<Object?>;
    return MSigningSessionDetails(
      userId: result[0]! as String,
      projectName: result[1]! as String,
      projectLogoURL: result[2]! as String,
      projectId: result[3]! as String,
      pinLength: result[4]! as int,
      verificationMethod: result[5]! as MVerificationMethod,
      verificationURL: result[6]! as String,
      verificationCustomText: result[7]! as String,
      identityTypeLabel: result[8]! as String,
      quickCodeEnabled: result[9]! as bool,
      limitQuickCodeRegistration: result[10]! as bool,
      identityType: result[11]! as MIdentityType,
      sessionId: result[12]! as String,
      signingHash: result[13]! as String,
      signingDescription: result[14]! as String,
      status: result[15]! as MSigningSessionStatus,
      expireTime: result[16]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MSigningSessionDetails || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MUser {
  MUser({
    required this.projectId,
    required this.revoked,
    required this.userId,
    required this.pinLength,
    required this.hashedMpinId,
  });

  String projectId;

  bool revoked;

  String userId;

  int pinLength;

  String hashedMpinId;

  List<Object?> _toList() {
    return <Object?>[
      projectId,
      revoked,
      userId,
      pinLength,
      hashedMpinId,
    ];
  }

  Object encode() {
    return _toList();  }

  static MUser decode(Object result) {
    result as List<Object?>;
    return MUser(
      projectId: result[0]! as String,
      revoked: result[1]! as bool,
      userId: result[2]! as String,
      pinLength: result[3]! as int,
      hashedMpinId: result[4]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MUser || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MQuickCode {
  MQuickCode({
    required this.code,
    required this.expiryTime,
    required this.ttlSeconds,
  });

  String code;

  int expiryTime;

  int ttlSeconds;

  List<Object?> _toList() {
    return <Object?>[
      code,
      expiryTime,
      ttlSeconds,
    ];
  }

  Object encode() {
    return _toList();  }

  static MQuickCode decode(Object result) {
    result as List<Object?>;
    return MQuickCode(
      code: result[0]! as String,
      expiryTime: result[1]! as int,
      ttlSeconds: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MQuickCode || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MSignature {
  MSignature({
    required this.u,
    required this.v,
    required this.dtas,
    required this.mpinId,
    required this.hash,
    required this.publicKey,
  });

  String u;

  String v;

  String dtas;

  String mpinId;

  String hash;

  String publicKey;

  List<Object?> _toList() {
    return <Object?>[
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    ];
  }

  Object encode() {
    return _toList();  }

  static MSignature decode(Object result) {
    result as List<Object?>;
    return MSignature(
      u: result[0]! as String,
      v: result[1]! as String,
      dtas: result[2]! as String,
      mpinId: result[3]! as String,
      hash: result[4]! as String,
      publicKey: result[5]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MSignature || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MSigningResult {
  MSigningResult({
    required this.signature,
    required this.timestamp,
  });

  MSignature signature;

  int timestamp;

  List<Object?> _toList() {
    return <Object?>[
      signature,
      timestamp,
    ];
  }

  Object encode() {
    return _toList();  }

  static MSigningResult decode(Object result) {
    result as List<Object?>;
    return MSigningResult(
      signature: result[0]! as MSignature,
      timestamp: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MSigningResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MActivationTokenErrorResponse {
  MActivationTokenErrorResponse({
    required this.projectId,
    this.accessId,
    required this.userId,
  });

  String projectId;

  String? accessId;

  String userId;

  List<Object?> _toList() {
    return <Object?>[
      projectId,
      accessId,
      userId,
    ];
  }

  Object encode() {
    return _toList();  }

  static MActivationTokenErrorResponse decode(Object result) {
    result as List<Object?>;
    return MActivationTokenErrorResponse(
      projectId: result[0]! as String,
      accessId: result[1] as String?,
      userId: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MActivationTokenErrorResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MEmailVerificationResponse {
  MEmailVerificationResponse({
    required this.backoff,
    required this.emailVerificationMethod,
  });

  int backoff;

  MEmailVerificationMethod emailVerificationMethod;

  List<Object?> _toList() {
    return <Object?>[
      backoff,
      emailVerificationMethod,
    ];
  }

  Object encode() {
    return _toList();  }

  static MEmailVerificationResponse decode(Object result) {
    result as List<Object?>;
    return MEmailVerificationResponse(
      backoff: result[0]! as int,
      emailVerificationMethod: result[1]! as MEmailVerificationMethod,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MEmailVerificationResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is MVerificationMethod) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is MEmailVerificationMethod) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is MIdentityType) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is MSigningSessionStatus) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is ConfigurationExceptionCode) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is EmailVerificationExceptionCode) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is ActivationTokenExceptionCode) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is RegistrationExceptionCode) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is AuthenticationExceptionCode) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is QuickCodeExceptionCode) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is AuthenticationSessionDetailsExceptionCode) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    }    else if (value is SigningSessionDetailsExceptionCode) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    }    else if (value is SigningExceptionCode) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    }    else if (value is MConfiguration) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is MActivationTokenResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is MAuthenticationSessionDetails) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is MSigningSessionDetails) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is MUser) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is MQuickCode) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is MSignature) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is MSigningResult) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is MActivationTokenErrorResponse) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is MEmailVerificationResponse) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MVerificationMethod.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MEmailVerificationMethod.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MIdentityType.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MSigningSessionStatus.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConfigurationExceptionCode.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : EmailVerificationExceptionCode.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ActivationTokenExceptionCode.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RegistrationExceptionCode.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AuthenticationExceptionCode.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : QuickCodeExceptionCode.values[value];
      case 139: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AuthenticationSessionDetailsExceptionCode.values[value];
      case 140: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : SigningSessionDetailsExceptionCode.values[value];
      case 141: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : SigningExceptionCode.values[value];
      case 142: 
        return MConfiguration.decode(readValue(buffer)!);
      case 143: 
        return MActivationTokenResponse.decode(readValue(buffer)!);
      case 144: 
        return MAuthenticationSessionDetails.decode(readValue(buffer)!);
      case 145: 
        return MSigningSessionDetails.decode(readValue(buffer)!);
      case 146: 
        return MUser.decode(readValue(buffer)!);
      case 147: 
        return MQuickCode.decode(readValue(buffer)!);
      case 148: 
        return MSignature.decode(readValue(buffer)!);
      case 149: 
        return MSigningResult.decode(readValue(buffer)!);
      case 150: 
        return MActivationTokenErrorResponse.decode(readValue(buffer)!);
      case 151: 
        return MEmailVerificationResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MiraclSdk {
  /// Constructor for [MiraclSdk].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MiraclSdk({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initSdk(MConfiguration configuration) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.initSdk$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[configuration]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setProjectId(String projectId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.setProjectId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[projectId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MEmailVerificationResponse> sendVerificationEmail(String userId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sendVerificationEmail$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MEmailVerificationResponse?)!;
    }
  }

  Future<MActivationTokenResponse> getActivationTokenByURI(String uri) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByURI$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[uri]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MActivationTokenResponse?)!;
    }
  }

  Future<MActivationTokenResponse> getActivationTokenByUserIdAndCode(String userId, String code) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByUserIdAndCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId, code]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MActivationTokenResponse?)!;
    }
  }

  Future<List<MUser>> getUsers() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUsers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MUser>();
    }
  }

  Future<MUser> register(String userId, String activationToken, String pin, String? pushToken) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.register$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId, activationToken, pin, pushToken]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MUser?)!;
    }
  }

  Future<String> authenticate(MUser user, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> delete(MUser user) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.delete$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MUser?> getUser(String userId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUser$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[userId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as MUser?);
    }
  }

  Future<MQuickCode> generateQuickCode(MUser user, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.generateQuickCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MQuickCode?)!;
    }
  }

  Future<MSigningResult> sign(MUser user, Uint8List message, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sign$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user, message, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MSigningResult?)!;
    }
  }

  Future<bool> authenticateWithQrCode(MUser user, String qrCode, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithQrCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user, qrCode, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> authenticateWithLink(MUser user, String link, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithLink$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user, link, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> authenticateWithNotificationPayload(Map<String, String> payload, String pin) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithNotificationPayload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[payload, pin]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<MAuthenticationSessionDetails> getAuthenticationSessionDetailsFromQRCode(String qrCode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromQRCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[qrCode]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MAuthenticationSessionDetails?)!;
    }
  }

  Future<MAuthenticationSessionDetails> getAuthenticationSessionDetailsFromLink(String link) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromLink$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[link]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MAuthenticationSessionDetails?)!;
    }
  }

  Future<MAuthenticationSessionDetails> getAuthenticationSessionDetailsFromPushNofitifactionPayload(Map<String, String> payload) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromPushNofitifactionPayload$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[payload]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MAuthenticationSessionDetails?)!;
    }
  }

  Future<MSigningSessionDetails> getSigningDetailsFromQRCode(String qrCode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningDetailsFromQRCode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[qrCode]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MSigningSessionDetails?)!;
    }
  }

  Future<MSigningSessionDetails> getSigningSessionDetailsFromLink(String link) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningSessionDetailsFromLink$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[link]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MSigningSessionDetails?)!;
    }
  }
}

abstract class MLogger {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void debug(String category, String message);

  void info(String category, String message);

  void warning(String category, String message);

  void error(String category, String message);

  static void setUp(MLogger? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_miracl_sdk.MLogger.debug$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.debug was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_category = (args[0] as String?);
          assert(arg_category != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.debug was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.debug was null, expected non-null String.');
          try {
            api.debug(arg_category!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_miracl_sdk.MLogger.info$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.info was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_category = (args[0] as String?);
          assert(arg_category != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.info was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.info was null, expected non-null String.');
          try {
            api.info(arg_category!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_miracl_sdk.MLogger.warning$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.warning was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_category = (args[0] as String?);
          assert(arg_category != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.warning was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.warning was null, expected non-null String.');
          try {
            api.warning(arg_category!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_miracl_sdk.MLogger.error$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.error was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_category = (args[0] as String?);
          assert(arg_category != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.error was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_miracl_sdk.MLogger.error was null, expected non-null String.');
          try {
            api.error(arg_category!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
