// Autogenerated from Pigeon (v9.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class MConfiguration {
  MConfiguration({
    required this.projectId,
    required this.clientId,
    required this.redirectUri,
  });

  String projectId;

  String clientId;

  String redirectUri;

  Object encode() {
    return <Object?>[
      projectId,
      clientId,
      redirectUri,
    ];
  }

  static MConfiguration decode(Object result) {
    result as List<Object?>;
    return MConfiguration(
      projectId: result[0]! as String,
      clientId: result[1]! as String,
      redirectUri: result[2]! as String,
    );
  }
}

class MActivationTokenResponse {
  MActivationTokenResponse({
    required this.projectId,
    this.accessId,
    required this.userId,
    required this.activationToken,
  });

  String projectId;

  String? accessId;

  String userId;

  String activationToken;

  Object encode() {
    return <Object?>[
      projectId,
      accessId,
      userId,
      activationToken,
    ];
  }

  static MActivationTokenResponse decode(Object result) {
    result as List<Object?>;
    return MActivationTokenResponse(
      projectId: result[0]! as String,
      accessId: result[1] as String?,
      userId: result[2]! as String,
      activationToken: result[3]! as String,
    );
  }
}

class MAuthenticationSessionDetails {
  MAuthenticationSessionDetails({
    required this.userId,
  });

  String userId;

  Object encode() {
    return <Object?>[
      userId,
    ];
  }

  static MAuthenticationSessionDetails decode(Object result) {
    result as List<Object?>;
    return MAuthenticationSessionDetails(
      userId: result[0]! as String,
    );
  }
}

class MUser {
  MUser({
    required this.authenticationIdentityId,
    required this.projectId,
    required this.revoked,
    required this.signingIdentityId,
    required this.userId,
  });

  String authenticationIdentityId;

  String projectId;

  bool revoked;

  String signingIdentityId;

  String userId;

  Object encode() {
    return <Object?>[
      authenticationIdentityId,
      projectId,
      revoked,
      signingIdentityId,
      userId,
    ];
  }

  static MUser decode(Object result) {
    result as List<Object?>;
    return MUser(
      authenticationIdentityId: result[0]! as String,
      projectId: result[1]! as String,
      revoked: result[2]! as bool,
      signingIdentityId: result[3]! as String,
      userId: result[4]! as String,
    );
  }
}

class MQuickCode {
  MQuickCode({
    required this.code,
    required this.expiryTime,
    required this.nowTime,
    required this.ttlSeconds,
  });

  String code;

  int expiryTime;

  int nowTime;

  int ttlSeconds;

  Object encode() {
    return <Object?>[
      code,
      expiryTime,
      nowTime,
      ttlSeconds,
    ];
  }

  static MQuickCode decode(Object result) {
    result as List<Object?>;
    return MQuickCode(
      code: result[0]! as String,
      expiryTime: result[1]! as int,
      nowTime: result[2]! as int,
      ttlSeconds: result[3]! as int,
    );
  }
}

class MSignature {
  MSignature({
    required this.u,
    required this.v,
    required this.dtas,
    required this.mpinId,
    required this.hash,
    required this.publicKey,
  });

  String u;

  String v;

  String dtas;

  String mpinId;

  String hash;

  String publicKey;

  Object encode() {
    return <Object?>[
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    ];
  }

  static MSignature decode(Object result) {
    result as List<Object?>;
    return MSignature(
      u: result[0]! as String,
      v: result[1]! as String,
      dtas: result[2]! as String,
      mpinId: result[3]! as String,
      hash: result[4]! as String,
      publicKey: result[5]! as String,
    );
  }
}

class MIdentity {
  MIdentity({
    required this.dtas,
    required this.id,
    required this.hashedMpinId,
    required this.mpinId,
    required this.pinLength,
    this.publicKey,
    required this.token,
  });

  String dtas;

  String id;

  String hashedMpinId;

  Uint8List mpinId;

  int pinLength;

  Uint8List? publicKey;

  Uint8List token;

  Object encode() {
    return <Object?>[
      dtas,
      id,
      hashedMpinId,
      mpinId,
      pinLength,
      publicKey,
      token,
    ];
  }

  static MIdentity decode(Object result) {
    result as List<Object?>;
    return MIdentity(
      dtas: result[0]! as String,
      id: result[1]! as String,
      hashedMpinId: result[2]! as String,
      mpinId: result[3]! as Uint8List,
      pinLength: result[4]! as int,
      publicKey: result[5] as Uint8List?,
      token: result[6]! as Uint8List,
    );
  }
}

class _MiraclSdkCodec extends StandardMessageCodec {
  const _MiraclSdkCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MActivationTokenResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MAuthenticationSessionDetails) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MConfiguration) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MIdentity) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MQuickCode) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is MSignature) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is MUser) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MActivationTokenResponse.decode(readValue(buffer)!);
      case 129: 
        return MAuthenticationSessionDetails.decode(readValue(buffer)!);
      case 130: 
        return MConfiguration.decode(readValue(buffer)!);
      case 131: 
        return MIdentity.decode(readValue(buffer)!);
      case 132: 
        return MQuickCode.decode(readValue(buffer)!);
      case 133: 
        return MSignature.decode(readValue(buffer)!);
      case 134: 
        return MUser.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MiraclSdk {
  /// Constructor for [MiraclSdk].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MiraclSdk({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MiraclSdkCodec();

  Future<void> initSdk(MConfiguration arg_configuration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.initSdk', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_configuration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> sendVerificationEmail(String arg_userId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.sendVerificationEmail', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<MActivationTokenResponse> getActivationToken(String arg_uri) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.getActivationToken', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_uri]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MActivationTokenResponse?)!;
    }
  }

  Future<List<MUser?>> getUsers() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.getUsers', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MUser?>();
    }
  }

  Future<MUser> register(String arg_userId, String arg_activationToken, String arg_pin, String? arg_pushToken) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.register', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_activationToken, arg_pin, arg_pushToken]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MUser?)!;
    }
  }

  Future<String> authenticate(MUser arg_user, String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.authenticate', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_user, arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<MAuthenticationSessionDetails> getAuthenticationSessionDetailsFromQRCode(String arg_qrCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.getAuthenticationSessionDetailsFromQRCode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_qrCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MAuthenticationSessionDetails?)!;
    }
  }

  Future<void> delete(String arg_userId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.delete', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MQuickCode> generateQuickCode(String arg_userId, String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.generateQuickCode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MQuickCode?)!;
    }
  }

  Future<MUser> signingRegister(String arg_userId, String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.signingRegister', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MUser?)!;
    }
  }

  Future<MSignature> sign(String arg_userId, String arg_pin, Uint8List arg_message, int arg_date) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.sign', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_pin, arg_message, arg_date]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MSignature?)!;
    }
  }

  Future<bool> authenticateWithQrCode(String arg_userId, String arg_pin, String arg_qrCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.authenticateWithQrCode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId, arg_pin, arg_qrCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<MIdentity> getAuthenticationIdentity(String arg_userId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.getAuthenticationIdentity', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MIdentity?)!;
    }
  }

  Future<void> authenticateWithNotificationPayload(Map<String?, String?> arg_payload, String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MiraclSdk.authenticateWithNotificationPayload', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_payload, arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
