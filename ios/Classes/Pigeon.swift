// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsPigeon(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsPigeon(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsPigeon(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashPigeon(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashPigeon(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashPigeon(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum MVerificationMethod: Int {
  case fullCustom = 0
  case standardEmail = 1
}

enum MEmailVerificationMethod: Int {
  case code = 0
  case link = 1
}

enum MIdentityType: Int {
  case email = 0
  case alphanumeric = 1
}

enum MSigningSessionStatus: Int {
  case active = 0
  case signed = 1
}

enum ConfigurationExceptionCode: Int {
  case emptyProjectId = 0
}

enum EmailVerificationExceptionCode: Int {
  case emptyUserId = 0
  case invalidSessionDetails = 1
  case requestBackoff = 2
  case verificaitonFail = 3
}

enum ActivationTokenExceptionCode: Int {
  case emptyUserId = 0
  case emptyVerificationCode = 1
  case unsuccessfulVerification = 2
  case getActivationTokenFail = 3
}

enum RegistrationExceptionCode: Int {
  case emptyUserId = 0
  case emptyActivationToken = 1
  case invalidActivationToken = 2
  case registrationFail = 3
  case unsupportedEllipticCurve = 4
  case pinCancelled = 5
  case invalidPin = 6
  case projectMismatch = 7
}

enum AuthenticationExceptionCode: Int {
  case invalidUserData = 0
  case invalidQRCode = 1
  case invalidPushNotificationPayload = 2
  case userNotFound = 3
  case invalidUniversalLink = 4
  case authenticationFail = 5
  case revoked = 6
  case invalidAuthenticationSession = 7
  case unsuccessfulAuthentication = 8
  case pinCancelled = 9
  case invalidPin = 10
}

enum QuickCodeExceptionCode: Int {
  case revoked = 0
  case unsuccessfulAuthentication = 1
  case pinCancelled = 2
  case invalidPin = 3
  case limitedQuickCodeGeneration = 4
  case generationFail = 5
}

enum AuthenticationSessionDetailsExceptionCode: Int {
  case invalidLink = 0
  case invalidQRCode = 1
  case invalidNotificationPayload = 2
  case invalidAuthenticationSessionDetails = 3
  case getAuthenticationSessionDetailsFail = 4
  case abortSessionFail = 5
}

enum SigningSessionDetailsExceptionCode: Int {
  case invalidLink = 0
  case invalidQRCode = 1
  case invalidSigningSessionDetails = 2
  case getSigningSessionDetailsFail = 3
  case invalidSigningSession = 4
  case completeSigningSessionFail = 5
  case abortSigningSessionFail = 6
}

enum SigningExceptionCode: Int {
  case emptyMessageHash = 0
  case emptyPublicKey = 1
  case invalidUserData = 2
  case pinCancelled = 3
  case invalidPin = 4
  case signingFail = 5
  case revoked = 6
  case unsuccessfulAuthentication = 7
  case invalidSigningSession = 8
  case invalidSigningSessionDetails = 9
}

/// Generated class from Pigeon that represents data sent in messages.
struct MConfiguration: Hashable {
  var projectId: String
  var applicationInfo: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MConfiguration? {
    let projectId = pigeonVar_list[0] as! String
    let applicationInfo = pigeonVar_list[1] as! String

    return MConfiguration(
      projectId: projectId,
      applicationInfo: applicationInfo
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      applicationInfo,
    ]
  }
  static func == (lhs: MConfiguration, rhs: MConfiguration) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MActivationTokenResponse: Hashable {
  var projectId: String
  var accessId: String? = nil
  var userId: String
  var activationToken: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MActivationTokenResponse? {
    let projectId = pigeonVar_list[0] as! String
    let accessId: String? = nilOrValue(pigeonVar_list[1])
    let userId = pigeonVar_list[2] as! String
    let activationToken = pigeonVar_list[3] as! String

    return MActivationTokenResponse(
      projectId: projectId,
      accessId: accessId,
      userId: userId,
      activationToken: activationToken
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      accessId,
      userId,
      activationToken,
    ]
  }
  static func == (lhs: MActivationTokenResponse, rhs: MActivationTokenResponse) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MAuthenticationSessionDetails: Hashable {
  var userId: String
  var projectName: String
  var projectLogoURL: String
  var projectId: String
  var pinLength: Int64
  var verificationMethod: MVerificationMethod
  var verificationURL: String
  var verificationCustomText: String
  var identityTypeLabel: String
  var quickCodeEnabled: Bool
  var limitQuickCodeRegistration: Bool
  var identityType: MIdentityType
  var accessId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MAuthenticationSessionDetails? {
    let userId = pigeonVar_list[0] as! String
    let projectName = pigeonVar_list[1] as! String
    let projectLogoURL = pigeonVar_list[2] as! String
    let projectId = pigeonVar_list[3] as! String
    let pinLength = pigeonVar_list[4] as! Int64
    let verificationMethod = pigeonVar_list[5] as! MVerificationMethod
    let verificationURL = pigeonVar_list[6] as! String
    let verificationCustomText = pigeonVar_list[7] as! String
    let identityTypeLabel = pigeonVar_list[8] as! String
    let quickCodeEnabled = pigeonVar_list[9] as! Bool
    let limitQuickCodeRegistration = pigeonVar_list[10] as! Bool
    let identityType = pigeonVar_list[11] as! MIdentityType
    let accessId = pigeonVar_list[12] as! String

    return MAuthenticationSessionDetails(
      userId: userId,
      projectName: projectName,
      projectLogoURL: projectLogoURL,
      projectId: projectId,
      pinLength: pinLength,
      verificationMethod: verificationMethod,
      verificationURL: verificationURL,
      verificationCustomText: verificationCustomText,
      identityTypeLabel: identityTypeLabel,
      quickCodeEnabled: quickCodeEnabled,
      limitQuickCodeRegistration: limitQuickCodeRegistration,
      identityType: identityType,
      accessId: accessId
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      accessId,
    ]
  }
  static func == (lhs: MAuthenticationSessionDetails, rhs: MAuthenticationSessionDetails) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MSigningSessionDetails: Hashable {
  var userId: String
  var projectName: String
  var projectLogoURL: String
  var projectId: String
  var pinLength: Int64
  var verificationMethod: MVerificationMethod
  var verificationURL: String
  var verificationCustomText: String
  var identityTypeLabel: String
  var quickCodeEnabled: Bool
  var limitQuickCodeRegistration: Bool
  var identityType: MIdentityType
  var sessionId: String
  var signingHash: String
  var signingDescription: String
  var status: MSigningSessionStatus
  var expireTime: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MSigningSessionDetails? {
    let userId = pigeonVar_list[0] as! String
    let projectName = pigeonVar_list[1] as! String
    let projectLogoURL = pigeonVar_list[2] as! String
    let projectId = pigeonVar_list[3] as! String
    let pinLength = pigeonVar_list[4] as! Int64
    let verificationMethod = pigeonVar_list[5] as! MVerificationMethod
    let verificationURL = pigeonVar_list[6] as! String
    let verificationCustomText = pigeonVar_list[7] as! String
    let identityTypeLabel = pigeonVar_list[8] as! String
    let quickCodeEnabled = pigeonVar_list[9] as! Bool
    let limitQuickCodeRegistration = pigeonVar_list[10] as! Bool
    let identityType = pigeonVar_list[11] as! MIdentityType
    let sessionId = pigeonVar_list[12] as! String
    let signingHash = pigeonVar_list[13] as! String
    let signingDescription = pigeonVar_list[14] as! String
    let status = pigeonVar_list[15] as! MSigningSessionStatus
    let expireTime = pigeonVar_list[16] as! Int64

    return MSigningSessionDetails(
      userId: userId,
      projectName: projectName,
      projectLogoURL: projectLogoURL,
      projectId: projectId,
      pinLength: pinLength,
      verificationMethod: verificationMethod,
      verificationURL: verificationURL,
      verificationCustomText: verificationCustomText,
      identityTypeLabel: identityTypeLabel,
      quickCodeEnabled: quickCodeEnabled,
      limitQuickCodeRegistration: limitQuickCodeRegistration,
      identityType: identityType,
      sessionId: sessionId,
      signingHash: signingHash,
      signingDescription: signingDescription,
      status: status,
      expireTime: expireTime
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      projectName,
      projectLogoURL,
      projectId,
      pinLength,
      verificationMethod,
      verificationURL,
      verificationCustomText,
      identityTypeLabel,
      quickCodeEnabled,
      limitQuickCodeRegistration,
      identityType,
      sessionId,
      signingHash,
      signingDescription,
      status,
      expireTime,
    ]
  }
  static func == (lhs: MSigningSessionDetails, rhs: MSigningSessionDetails) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MUser: Hashable {
  var projectId: String
  var revoked: Bool
  var userId: String
  var pinLength: Int64
  var hashedMpinId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MUser? {
    let projectId = pigeonVar_list[0] as! String
    let revoked = pigeonVar_list[1] as! Bool
    let userId = pigeonVar_list[2] as! String
    let pinLength = pigeonVar_list[3] as! Int64
    let hashedMpinId = pigeonVar_list[4] as! String

    return MUser(
      projectId: projectId,
      revoked: revoked,
      userId: userId,
      pinLength: pinLength,
      hashedMpinId: hashedMpinId
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      revoked,
      userId,
      pinLength,
      hashedMpinId,
    ]
  }
  static func == (lhs: MUser, rhs: MUser) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MQuickCode: Hashable {
  var code: String
  var expiryTime: Int64
  var ttlSeconds: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MQuickCode? {
    let code = pigeonVar_list[0] as! String
    let expiryTime = pigeonVar_list[1] as! Int64
    let ttlSeconds = pigeonVar_list[2] as! Int64

    return MQuickCode(
      code: code,
      expiryTime: expiryTime,
      ttlSeconds: ttlSeconds
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      expiryTime,
      ttlSeconds,
    ]
  }
  static func == (lhs: MQuickCode, rhs: MQuickCode) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MSignature: Hashable {
  var u: String
  var v: String
  var dtas: String
  var mpinId: String
  var hash: String
  var publicKey: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MSignature? {
    let u = pigeonVar_list[0] as! String
    let v = pigeonVar_list[1] as! String
    let dtas = pigeonVar_list[2] as! String
    let mpinId = pigeonVar_list[3] as! String
    let hash = pigeonVar_list[4] as! String
    let publicKey = pigeonVar_list[5] as! String

    return MSignature(
      u: u,
      v: v,
      dtas: dtas,
      mpinId: mpinId,
      hash: hash,
      publicKey: publicKey
    )
  }
  func toList() -> [Any?] {
    return [
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    ]
  }
  static func == (lhs: MSignature, rhs: MSignature) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MSigningResult: Hashable {
  var signature: MSignature
  var timestamp: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MSigningResult? {
    let signature = pigeonVar_list[0] as! MSignature
    let timestamp = pigeonVar_list[1] as! Int64

    return MSigningResult(
      signature: signature,
      timestamp: timestamp
    )
  }
  func toList() -> [Any?] {
    return [
      signature,
      timestamp,
    ]
  }
  static func == (lhs: MSigningResult, rhs: MSigningResult) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MActivationTokenErrorResponse: Hashable {
  var projectId: String
  var accessId: String? = nil
  var userId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MActivationTokenErrorResponse? {
    let projectId = pigeonVar_list[0] as! String
    let accessId: String? = nilOrValue(pigeonVar_list[1])
    let userId = pigeonVar_list[2] as! String

    return MActivationTokenErrorResponse(
      projectId: projectId,
      accessId: accessId,
      userId: userId
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      accessId,
      userId,
    ]
  }
  static func == (lhs: MActivationTokenErrorResponse, rhs: MActivationTokenErrorResponse) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MEmailVerificationResponse: Hashable {
  var backoff: Int64
  var emailVerificationMethod: MEmailVerificationMethod


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MEmailVerificationResponse? {
    let backoff = pigeonVar_list[0] as! Int64
    let emailVerificationMethod = pigeonVar_list[1] as! MEmailVerificationMethod

    return MEmailVerificationResponse(
      backoff: backoff,
      emailVerificationMethod: emailVerificationMethod
    )
  }
  func toList() -> [Any?] {
    return [
      backoff,
      emailVerificationMethod,
    ]
  }
  static func == (lhs: MEmailVerificationResponse, rhs: MEmailVerificationResponse) -> Bool {
    return deepEqualsPigeon(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashPigeon(value: toList(), hasher: &hasher)
  }
}

private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MVerificationMethod(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MEmailVerificationMethod(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MIdentityType(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MSigningSessionStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ConfigurationExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return EmailVerificationExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ActivationTokenExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 136:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return RegistrationExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 137:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AuthenticationExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 138:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return QuickCodeExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 139:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AuthenticationSessionDetailsExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 140:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return SigningSessionDetailsExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 141:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return SigningExceptionCode(rawValue: enumResultAsInt)
      }
      return nil
    case 142:
      return MConfiguration.fromList(self.readValue() as! [Any?])
    case 143:
      return MActivationTokenResponse.fromList(self.readValue() as! [Any?])
    case 144:
      return MAuthenticationSessionDetails.fromList(self.readValue() as! [Any?])
    case 145:
      return MSigningSessionDetails.fromList(self.readValue() as! [Any?])
    case 146:
      return MUser.fromList(self.readValue() as! [Any?])
    case 147:
      return MQuickCode.fromList(self.readValue() as! [Any?])
    case 148:
      return MSignature.fromList(self.readValue() as! [Any?])
    case 149:
      return MSigningResult.fromList(self.readValue() as! [Any?])
    case 150:
      return MActivationTokenErrorResponse.fromList(self.readValue() as! [Any?])
    case 151:
      return MEmailVerificationResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MVerificationMethod {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? MEmailVerificationMethod {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? MIdentityType {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? MSigningSessionStatus {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? ConfigurationExceptionCode {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? EmailVerificationExceptionCode {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? ActivationTokenExceptionCode {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? RegistrationExceptionCode {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? AuthenticationExceptionCode {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else if let value = value as? QuickCodeExceptionCode {
      super.writeByte(138)
      super.writeValue(value.rawValue)
    } else if let value = value as? AuthenticationSessionDetailsExceptionCode {
      super.writeByte(139)
      super.writeValue(value.rawValue)
    } else if let value = value as? SigningSessionDetailsExceptionCode {
      super.writeByte(140)
      super.writeValue(value.rawValue)
    } else if let value = value as? SigningExceptionCode {
      super.writeByte(141)
      super.writeValue(value.rawValue)
    } else if let value = value as? MConfiguration {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? MActivationTokenResponse {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? MAuthenticationSessionDetails {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? MSigningSessionDetails {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? MUser {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? MQuickCode {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? MSignature {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? MSigningResult {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? MActivationTokenErrorResponse {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? MEmailVerificationResponse {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MiraclSdk {
  func initSdk(configuration: MConfiguration, completion: @escaping (Result<Void, Error>) -> Void)
  func setProjectId(projectId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func sendVerificationEmail(userId: String, completion: @escaping (Result<MEmailVerificationResponse, Error>) -> Void)
  func getActivationTokenByURI(uri: String, completion: @escaping (Result<MActivationTokenResponse, Error>) -> Void)
  func getActivationTokenByUserIdAndCode(userId: String, code: String, completion: @escaping (Result<MActivationTokenResponse, Error>) -> Void)
  func getUsers(completion: @escaping (Result<[MUser], Error>) -> Void)
  func register(userId: String, activationToken: String, pin: String, pushToken: String?, completion: @escaping (Result<MUser, Error>) -> Void)
  func authenticate(user: MUser, pin: String, completion: @escaping (Result<String, Error>) -> Void)
  func delete(user: MUser, completion: @escaping (Result<Void, Error>) -> Void)
  func getUser(userId: String, completion: @escaping (Result<MUser?, Error>) -> Void)
  func generateQuickCode(user: MUser, pin: String, completion: @escaping (Result<MQuickCode, Error>) -> Void)
  func sign(user: MUser, message: FlutterStandardTypedData, pin: String, completion: @escaping (Result<MSigningResult, Error>) -> Void)
  func authenticateWithQrCode(user: MUser, qrCode: String, pin: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func authenticateWithLink(user: MUser, link: String, pin: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func authenticateWithNotificationPayload(payload: [String: String], pin: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func getAuthenticationSessionDetailsFromQRCode(qrCode: String, completion: @escaping (Result<MAuthenticationSessionDetails, Error>) -> Void)
  func getAuthenticationSessionDetailsFromLink(link: String, completion: @escaping (Result<MAuthenticationSessionDetails, Error>) -> Void)
  func getAuthenticationSessionDetailsFromPushNofitifactionPayload(payload: [String: String], completion: @escaping (Result<MAuthenticationSessionDetails, Error>) -> Void)
  func getSigningDetailsFromQRCode(qrCode: String, completion: @escaping (Result<MSigningSessionDetails, Error>) -> Void)
  func getSigningSessionDetailsFromLink(link: String, completion: @escaping (Result<MSigningSessionDetails, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MiraclSdkSetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `MiraclSdk` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MiraclSdk?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initSdkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.initSdk\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initSdkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configurationArg = args[0] as! MConfiguration
        api.initSdk(configuration: configurationArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initSdkChannel.setMessageHandler(nil)
    }
    let setProjectIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.setProjectId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setProjectIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let projectIdArg = args[0] as! String
        api.setProjectId(projectId: projectIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setProjectIdChannel.setMessageHandler(nil)
    }
    let sendVerificationEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sendVerificationEmail\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendVerificationEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        api.sendVerificationEmail(userId: userIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendVerificationEmailChannel.setMessageHandler(nil)
    }
    let getActivationTokenByURIChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByURI\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getActivationTokenByURIChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uriArg = args[0] as! String
        api.getActivationTokenByURI(uri: uriArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getActivationTokenByURIChannel.setMessageHandler(nil)
    }
    let getActivationTokenByUserIdAndCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getActivationTokenByUserIdAndCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getActivationTokenByUserIdAndCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        let codeArg = args[1] as! String
        api.getActivationTokenByUserIdAndCode(userId: userIdArg, code: codeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getActivationTokenByUserIdAndCodeChannel.setMessageHandler(nil)
    }
    let getUsersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUsers\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUsersChannel.setMessageHandler { _, reply in
        api.getUsers { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getUsersChannel.setMessageHandler(nil)
    }
    let registerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.register\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        let activationTokenArg = args[1] as! String
        let pinArg = args[2] as! String
        let pushTokenArg: String? = nilOrValue(args[3])
        api.register(userId: userIdArg, activationToken: activationTokenArg, pin: pinArg, pushToken: pushTokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerChannel.setMessageHandler(nil)
    }
    let authenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        let pinArg = args[1] as! String
        api.authenticate(user: userArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        api.delete(user: userArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
    let getUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getUser\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        api.getUser(userId: userIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getUserChannel.setMessageHandler(nil)
    }
    let generateQuickCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.generateQuickCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateQuickCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        let pinArg = args[1] as! String
        api.generateQuickCode(user: userArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      generateQuickCodeChannel.setMessageHandler(nil)
    }
    let signChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.sign\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        let messageArg = args[1] as! FlutterStandardTypedData
        let pinArg = args[2] as! String
        api.sign(user: userArg, message: messageArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      signChannel.setMessageHandler(nil)
    }
    let authenticateWithQrCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithQrCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithQrCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        let qrCodeArg = args[1] as! String
        let pinArg = args[2] as! String
        api.authenticateWithQrCode(user: userArg, qrCode: qrCodeArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithQrCodeChannel.setMessageHandler(nil)
    }
    let authenticateWithLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithLink\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! MUser
        let linkArg = args[1] as! String
        let pinArg = args[2] as! String
        api.authenticateWithLink(user: userArg, link: linkArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithLinkChannel.setMessageHandler(nil)
    }
    let authenticateWithNotificationPayloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.authenticateWithNotificationPayload\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithNotificationPayloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let payloadArg = args[0] as! [String: String]
        let pinArg = args[1] as! String
        api.authenticateWithNotificationPayload(payload: payloadArg, pin: pinArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithNotificationPayloadChannel.setMessageHandler(nil)
    }
    let getAuthenticationSessionDetailsFromQRCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromQRCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticationSessionDetailsFromQRCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let qrCodeArg = args[0] as! String
        api.getAuthenticationSessionDetailsFromQRCode(qrCode: qrCodeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticationSessionDetailsFromQRCodeChannel.setMessageHandler(nil)
    }
    let getAuthenticationSessionDetailsFromLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromLink\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticationSessionDetailsFromLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let linkArg = args[0] as! String
        api.getAuthenticationSessionDetailsFromLink(link: linkArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticationSessionDetailsFromLinkChannel.setMessageHandler(nil)
    }
    let getAuthenticationSessionDetailsFromPushNofitifactionPayloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getAuthenticationSessionDetailsFromPushNofitifactionPayload\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticationSessionDetailsFromPushNofitifactionPayloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let payloadArg = args[0] as! [String: String]
        api.getAuthenticationSessionDetailsFromPushNofitifactionPayload(payload: payloadArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticationSessionDetailsFromPushNofitifactionPayloadChannel.setMessageHandler(nil)
    }
    let getSigningDetailsFromQRCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningDetailsFromQRCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSigningDetailsFromQRCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let qrCodeArg = args[0] as! String
        api.getSigningDetailsFromQRCode(qrCode: qrCodeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSigningDetailsFromQRCodeChannel.setMessageHandler(nil)
    }
    let getSigningSessionDetailsFromLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_miracl_sdk.MiraclSdk.getSigningSessionDetailsFromLink\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSigningSessionDetailsFromLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let linkArg = args[0] as! String
        api.getSigningSessionDetailsFromLink(link: linkArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSigningSessionDetailsFromLinkChannel.setMessageHandler(nil)
    }
  }
}
