// Autogenerated from Pigeon (v9.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct MConfiguration {
  var projectId: String
  var clientId: String
  var redirectUri: String

  static func fromList(_ list: [Any]) -> MConfiguration? {
    let projectId = list[0] as! String
    let clientId = list[1] as! String
    let redirectUri = list[2] as! String

    return MConfiguration(
      projectId: projectId,
      clientId: clientId,
      redirectUri: redirectUri
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      clientId,
      redirectUri,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MActivationTokenResponse {
  var projectId: String
  var accessId: String? = nil
  var userId: String
  var activationToken: String

  static func fromList(_ list: [Any]) -> MActivationTokenResponse? {
    let projectId = list[0] as! String
    let accessId: String? = nilOrValue(list[1])
    let userId = list[2] as! String
    let activationToken = list[3] as! String

    return MActivationTokenResponse(
      projectId: projectId,
      accessId: accessId,
      userId: userId,
      activationToken: activationToken
    )
  }
  func toList() -> [Any?] {
    return [
      projectId,
      accessId,
      userId,
      activationToken,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MAuthenticationSessionDetails {
  var userId: String

  static func fromList(_ list: [Any]) -> MAuthenticationSessionDetails? {
    let userId = list[0] as! String

    return MAuthenticationSessionDetails(
      userId: userId
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MUser {
  var authenticationIdentityId: String
  var projectId: String
  var revoked: Bool
  var signingIdentityId: String
  var userId: String

  static func fromList(_ list: [Any]) -> MUser? {
    let authenticationIdentityId = list[0] as! String
    let projectId = list[1] as! String
    let revoked = list[2] as! Bool
    let signingIdentityId = list[3] as! String
    let userId = list[4] as! String

    return MUser(
      authenticationIdentityId: authenticationIdentityId,
      projectId: projectId,
      revoked: revoked,
      signingIdentityId: signingIdentityId,
      userId: userId
    )
  }
  func toList() -> [Any?] {
    return [
      authenticationIdentityId,
      projectId,
      revoked,
      signingIdentityId,
      userId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MQuickCode {
  var code: String
  var expiryTime: Int64
  var nowTime: Int64
  var ttlSeconds: Int64

  static func fromList(_ list: [Any]) -> MQuickCode? {
    let code = list[0] as! String
    let expiryTime = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let nowTime = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let ttlSeconds = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)

    return MQuickCode(
      code: code,
      expiryTime: expiryTime,
      nowTime: nowTime,
      ttlSeconds: ttlSeconds
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      expiryTime,
      nowTime,
      ttlSeconds,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MSignature {
  var u: String
  var v: String
  var dtas: String
  var mpinId: String
  var hash: String
  var publicKey: String

  static func fromList(_ list: [Any]) -> MSignature? {
    let u = list[0] as! String
    let v = list[1] as! String
    let dtas = list[2] as! String
    let mpinId = list[3] as! String
    let hash = list[4] as! String
    let publicKey = list[5] as! String

    return MSignature(
      u: u,
      v: v,
      dtas: dtas,
      mpinId: mpinId,
      hash: hash,
      publicKey: publicKey
    )
  }
  func toList() -> [Any?] {
    return [
      u,
      v,
      dtas,
      mpinId,
      hash,
      publicKey,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MIdentity {
  var dtas: String
  var id: String
  var hashedMpinId: String
  var mpinId: FlutterStandardTypedData
  var pinLength: Int64
  var publicKey: FlutterStandardTypedData? = nil
  var token: FlutterStandardTypedData

  static func fromList(_ list: [Any]) -> MIdentity? {
    let dtas = list[0] as! String
    let id = list[1] as! String
    let hashedMpinId = list[2] as! String
    let mpinId = list[3] as! FlutterStandardTypedData
    let pinLength = list[4] is Int64 ? list[4] as! Int64 : Int64(list[4] as! Int32)
    let publicKey: FlutterStandardTypedData? = nilOrValue(list[5])
    let token = list[6] as! FlutterStandardTypedData

    return MIdentity(
      dtas: dtas,
      id: id,
      hashedMpinId: hashedMpinId,
      mpinId: mpinId,
      pinLength: pinLength,
      publicKey: publicKey,
      token: token
    )
  }
  func toList() -> [Any?] {
    return [
      dtas,
      id,
      hashedMpinId,
      mpinId,
      pinLength,
      publicKey,
      token,
    ]
  }
}

private class MiraclSdkCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return MActivationTokenResponse.fromList(self.readValue() as! [Any])
      case 129:
        return MAuthenticationSessionDetails.fromList(self.readValue() as! [Any])
      case 130:
        return MConfiguration.fromList(self.readValue() as! [Any])
      case 131:
        return MIdentity.fromList(self.readValue() as! [Any])
      case 132:
        return MQuickCode.fromList(self.readValue() as! [Any])
      case 133:
        return MSignature.fromList(self.readValue() as! [Any])
      case 134:
        return MUser.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class MiraclSdkCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MActivationTokenResponse {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? MAuthenticationSessionDetails {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MConfiguration {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? MIdentity {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? MQuickCode {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? MSignature {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? MUser {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MiraclSdkCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MiraclSdkCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MiraclSdkCodecWriter(data: data)
  }
}

class MiraclSdkCodec: FlutterStandardMessageCodec {
  static let shared = MiraclSdkCodec(readerWriter: MiraclSdkCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MiraclSdk {
  func initSdk(configuration: MConfiguration, completion: @escaping (Result<Void, Error>) -> Void)
  func sendVerificationEmail(userId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func getActivationToken(uri: String, completion: @escaping (Result<MActivationTokenResponse, Error>) -> Void)
  func getUsers() throws -> [MUser]
  func register(userId: String, activationToken: String, pin: String, pushToken: String?, completion: @escaping (Result<MUser, Error>) -> Void)
  func authenticate(user: MUser, pin: String, completion: @escaping (Result<String, Error>) -> Void)
  func getAuthenticationSessionDetailsFromQRCode(qrCode: String, completion: @escaping (Result<MAuthenticationSessionDetails, Error>) -> Void)
  func delete(userId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func generateQuickCode(userId: String, pin: String, completion: @escaping (Result<MQuickCode, Error>) -> Void)
  func signingRegister(userId: String, pin: String, completion: @escaping (Result<MUser, Error>) -> Void)
  func sign(userId: String, pin: String, message: FlutterStandardTypedData, date: Int64, completion: @escaping (Result<MSignature, Error>) -> Void)
  func authenticateWithQrCode(userId: String, pin: String, qrCode: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func getAuthenticationIdentity(userId: String, completion: @escaping (Result<MIdentity, Error>) -> Void)
  func authenticateWithNotificationPayload(payload: [String: String], pin: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MiraclSdkSetup {
  /// The codec used by MiraclSdk.
  static var codec: FlutterStandardMessageCodec { MiraclSdkCodec.shared }
  /// Sets up an instance of `MiraclSdk` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MiraclSdk?) {
    let initSdkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.initSdk", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initSdkChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let configurationArg = args[0] as! MConfiguration
        api.initSdk(configuration: configurationArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initSdkChannel.setMessageHandler(nil)
    }
    let sendVerificationEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.sendVerificationEmail", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendVerificationEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        api.sendVerificationEmail(userId: userIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      sendVerificationEmailChannel.setMessageHandler(nil)
    }
    let getActivationTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.getActivationToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getActivationTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let uriArg = args[0] as! String
        api.getActivationToken(uri: uriArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getActivationTokenChannel.setMessageHandler(nil)
    }
    let getUsersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.getUsers", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUsersChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUsers()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUsersChannel.setMessageHandler(nil)
    }
    let registerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.register", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let activationTokenArg = args[1] as! String
        let pinArg = args[2] as! String
        let pushTokenArg: String? = nilOrValue(args[3])
        api.register(userId: userIdArg, activationToken: activationTokenArg, pin: pinArg, pushToken: pushTokenArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerChannel.setMessageHandler(nil)
    }
    let authenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.authenticate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userArg = args[0] as! MUser
        let pinArg = args[1] as! String
        api.authenticate(user: userArg, pin: pinArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateChannel.setMessageHandler(nil)
    }
    let getAuthenticationSessionDetailsFromQRCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.getAuthenticationSessionDetailsFromQRCode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticationSessionDetailsFromQRCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let qrCodeArg = args[0] as! String
        api.getAuthenticationSessionDetailsFromQRCode(qrCode: qrCodeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticationSessionDetailsFromQRCodeChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.delete", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        api.delete(userId: userIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
    let generateQuickCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.generateQuickCode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateQuickCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let pinArg = args[1] as! String
        api.generateQuickCode(userId: userIdArg, pin: pinArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      generateQuickCodeChannel.setMessageHandler(nil)
    }
    let signingRegisterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.signingRegister", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signingRegisterChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let pinArg = args[1] as! String
        api.signingRegister(userId: userIdArg, pin: pinArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      signingRegisterChannel.setMessageHandler(nil)
    }
    let signChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.sign", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let pinArg = args[1] as! String
        let messageArg = args[2] as! FlutterStandardTypedData
        let dateArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.sign(userId: userIdArg, pin: pinArg, message: messageArg, date: dateArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      signChannel.setMessageHandler(nil)
    }
    let authenticateWithQrCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.authenticateWithQrCode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithQrCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        let pinArg = args[1] as! String
        let qrCodeArg = args[2] as! String
        api.authenticateWithQrCode(userId: userIdArg, pin: pinArg, qrCode: qrCodeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithQrCodeChannel.setMessageHandler(nil)
    }
    let getAuthenticationIdentityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.getAuthenticationIdentity", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticationIdentityChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let userIdArg = args[0] as! String
        api.getAuthenticationIdentity(userId: userIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticationIdentityChannel.setMessageHandler(nil)
    }
    let authenticateWithNotificationPayloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MiraclSdk.authenticateWithNotificationPayload", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateWithNotificationPayloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let payloadArg = args[0] as! [String: String]
        let pinArg = args[1] as! String
        api.authenticateWithNotificationPayload(payload: payloadArg, pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateWithNotificationPayloadChannel.setMessageHandler(nil)
    }
  }
}
