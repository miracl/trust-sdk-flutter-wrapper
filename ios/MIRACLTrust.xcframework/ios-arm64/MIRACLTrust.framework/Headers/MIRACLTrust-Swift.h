#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef MIRACLTRUST_SWIFT_H
#define MIRACLTRUST_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MIRACLTrust",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// The response returned from <a href="x-source-tag://miracltrust-_FUNC_getactivationtokenverificationurlcompletionhandler">getActivationToken</a>.
/// when there is an error in the request.
SWIFT_CLASS("_TtC11MIRACLTrust28ActivationTokenErrorResponse")
@interface ActivationTokenErrorResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable accessId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The response returned from <a href="x-source-tag://miracltrust-_FUNC_getactivationtokenverificationurlcompletionhandler">getActivationToken</a>.
SWIFT_CLASS("_TtC11MIRACLTrust23ActivationTokenResponse")
@interface ActivationTokenResponse : NSObject
/// The activation token returned after successful user verification.
@property (nonatomic, readonly, copy) NSString * _Nonnull activationToken;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable accessId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VerificationMethod : NSInteger;
enum IdentityType : NSInteger;

SWIFT_PROTOCOL("_TtP11MIRACLTrust14SessionDetails_")
@protocol SessionDetails
/// User id entered by the user when session is started.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Name of the project in MIRACL platform.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectName;
/// URL of the project logo.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectLogoURL;
/// Project id setting for the application in MIRACL platform.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
/// Pin Length that needs to be entered from user.
@property (nonatomic, readonly) NSInteger pinLength;
/// Indicates the method of user verification.
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
/// URL for verification in case of custom verification method
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationURL;
/// Custom text specified in the MIRACL Trust portal for the custom verification.
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationCustomText;
/// Label of the identity which will be used for identity verification.
@property (nonatomic, readonly, copy) NSString * _Nonnull identityTypeLabel;
/// Whether the QuickCode is enabled for the project or not.
@property (nonatomic, readonly) BOOL quickCodeEnabled;
/// Flag indicating whether registration with QuickCode is allowed for identities registered also with QuickCode.
@property (nonatomic, readonly) BOOL limitQuickCodeRegistration;
/// Identity type which will be used for identity verification.
@property (nonatomic, readonly) enum IdentityType identityType;
@end


/// Object representing details from incoming authentication session.
SWIFT_CLASS("_TtC11MIRACLTrust28AuthenticationSessionDetails")
@interface AuthenticationSessionDetails : NSObject <SessionDetails>
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectName;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectLogoURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly) NSInteger pinLength;
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationCustomText;
@property (nonatomic, readonly, copy) NSString * _Nonnull identityTypeLabel;
@property (nonatomic, readonly) BOOL quickCodeEnabled;
@property (nonatomic, readonly) BOOL limitQuickCodeRegistration;
@property (nonatomic, readonly) enum IdentityType identityType;
/// Identifier of the authentication session.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Client error representation which is returned by the MIRACL API.
SWIFT_CLASS("_TtC11MIRACLTrust15ClientErrorData")
@interface ClientErrorData : NSObject
/// Code of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// Human readable representation of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull info;
/// Additional information received in the error response.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Object that stores configurations of the SDK with values issued by MIRACL.
SWIFT_CLASS("_TtC11MIRACLTrust13Configuration")
@interface Configuration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol Logger;
enum LoggingLevel : NSInteger;
@class NSURL;
@class NSURLSessionConfiguration;

/// Builds <a href="x-source-tag://Configuration">Configuration</a> objects.
SWIFT_CLASS_NAMED("Builder")
@interface ConfigurationBuilder : NSObject
/// Initializing <a href="x-source-tag://Configuration.Builder">Configuration.Builder</a> object.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     projectId: <code>Project ID</code> setting for the MIRACL Platform.
///   </li>
///   <li>
///     deviceName: identifier that can help find the device on the MIRACL Trust Portal.
///     If not provided,  the value of <code>deviceName</code> is the name of the operation system (e.g <code>iOS</code>).
///   </li>
/// </ul>
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId deviceName:(NSString * _Nullable)deviceName OBJC_DESIGNATED_INITIALIZER;
/// Sets value of device name.
/// \param deviceName device name
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)deviceNameWith:(NSString * _Nonnull)deviceName;
/// Set custom <a href="x-source-tag://protocols-Logger">Logger</a> writer implementation.
/// \param logger custom <a href="x-source-tag://protocols-Logger">Logger</a> implementation.
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)loggerWith:(id <Logger> _Nonnull)logger;
/// Sets custom <a href="x-source-tag://enums-LoggingLevel">LoggingLevel</a> value. By default it is <code>none</code>.
/// This level can be set only for default logger, otherwise will be ignored.
/// \param level custom <a href="x-source-tag://enums-LoggingLevel">LoggingLevel</a>
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)loggingLevelWith:(enum LoggingLevel)level;
/// Sets custom MIRACL platform URL.
/// \param url custom MIRACL platform URL.
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)platformURLWith:(NSURL * _Nonnull)url;
/// Sets additional application information that will be sent via X-MIRACL-CLIENT HTTP header.
/// \param applicationInfo application info.
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)applicationInfoWith:(NSString * _Nonnull)applicationInfo;
/// Use this when you want to set the custom configuration to the SDK’s instance of URLSession.
/// As a default value it uses <code>ephemeral</code> configuration, 30 seconds for <code>timeoutIntervalForRequest</code> and
/// 300 seconds for <code>timeoutIntervalForResource</code>.
/// \param urlSessionConfiguration configuration for the URLSession to be set.
///
///
/// returns:
/// Configuration.Builder object.
- (ConfigurationBuilder * _Nonnull)URLSessionConfigurationWith:(NSURLSessionConfiguration * _Nonnull)urlSessionConfiguration;
/// Returns <a href="x-source-tag://Configuration">Configuration</a> object.
///
/// throws:
/// <a href="x-source-tag://enums-ConfigurationError">ConfigurationError</a>.
///
/// returns:
/// <a href="x-source-tag://Configuration">Configuration</a> object.
- (Configuration * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Possible email verification methods.
typedef SWIFT_ENUM(NSInteger, EmailVerificationMethod, open) {
/// Verification link is sent to the user email.
  EmailVerificationMethodLink = 0,
/// Verification code is sent to the user email.
  EmailVerificationMethodCode = 1,
};

/// Possible identity types that can be used for identity verification.
typedef SWIFT_ENUM(NSInteger, IdentityType, open) {
  IdentityTypeEmail = 0,
  IdentityTypeAlphanumeric = 1,
};

/// Enums describing what are categories for logging into the SDK.
typedef SWIFT_ENUM(NSInteger, LogCategory, open) {
/// Logging into <code>configuration</code> category.
  LogCategoryConfiguration = 0,
/// Logging into <code>networking</code> category.
  LogCategoryNetworking = 1,
/// Logging into <code>crypto</code> category.
  LogCategoryCrypto = 2,
/// Logging into <code>registration</code> category.
  LogCategoryRegistration = 3,
/// Logging into <code>authentication</code> category.
  LogCategoryAuthentication = 4,
/// Logging into <code>signing</code> category.
  LogCategorySigning = 5,
/// Logging into <code>signing registration</code> category.
  LogCategorySigningRegistration = 6,
/// Logging into <code>verification</code> category.
  LogCategoryVerification = 7,
/// Logging into <code>verification</code> category.
  LogCategoryVerificationConfirmation = 8,
/// Logging into <code>storage</code> category.
  LogCategoryStorage = 9,
/// Logging into <code>Session Management</code> category.
  LogCategorySessionManagement = 10,
/// Logging into <code>JWT Generation</code> category.
  LogCategoryJwtGeneration = 11,
/// Logging into <code>QuickCode</code> category.
  LogCategoryQuickCode = 12,
};


/// Protocol describing possible outputs for logging messages.
SWIFT_PROTOCOL("_TtP11MIRACLTrust6Logger_")
@protocol Logger
/// Outputs message with <code>debug</code> level.
/// \param message message that needs to be logged.
///
/// \param category which category of the SDK is the  logged message.
///
- (void)debugWithMessage:(NSString * _Nonnull)message category:(enum LogCategory)category;
/// Outputs message with <code>info</code> level.
/// \param message message that needs to be logged.
///
/// \param category which category of the SDK is the logged message.
///
- (void)infoWithMessage:(NSString * _Nonnull)message category:(enum LogCategory)category;
/// Outputs message with <code>warning</code> level.
/// \param message message that needs to be logged.
///
/// \param category which category of the SDK is the logged message.
///
- (void)warningWithMessage:(NSString * _Nonnull)message category:(enum LogCategory)category;
/// Outputs message with <code>error</code> level.
/// \param message message that needs to be logged.
///
/// \param category which category of the SDK is the logged message.
///
- (void)errorWithMessage:(NSString * _Nonnull)message category:(enum LogCategory)category;
@end

/// Enum describing on what level messages will be logged or logging will be turned off.
typedef SWIFT_ENUM(NSInteger, LoggingLevel, open) {
/// Logging is not allowed.
  LoggingLevelNone = 0,
/// Messages will be logged until the <code>debug</code> level.
  LoggingLevelDebug = 1,
/// Messages will be logged until the <code>info</code> level.
  LoggingLevelInfo = 2,
/// Messages will be logged until the <code>warning</code> level.
  LoggingLevelWarning = 3,
/// Messages will be logged until the <code>error</code> level.
  LoggingLevelError = 4,
};

@class User;
@class VerificationResponse;
@class QuickCode;
@class SigningSessionDetails;
@class NSData;
@class SigningResult;

/// Main class of the SDK used for all possible actions like registration and authentication.
SWIFT_CLASS("_TtC11MIRACLTrust11MIRACLTrust")
@interface MIRACLTrust : NSObject
@property (nonatomic, readonly, copy) NSArray<User *> * _Nonnull users;
@property (nonatomic, copy) NSString * _Nonnull projectId;
/// Getting singleton instance of the MIRACLTrust class.
///
/// returns:
/// singleton instance of the MIRACLTrust class.
+ (MIRACLTrust * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Configure SDK with values issued by MIRACL and stored in the <a href="x-source-tag://Configuration">Configuration</a> object.
/// It is recommended to be called right after the application is launched.
/// \param configuration object storing configurations of the SDK.
///
+ (BOOL)configureWith:(Configuration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error;
/// Configure a new project ID when the SDK have to work with a different project.
/// \param projectId <code>Project ID</code> setting for the MIRACL Platform that needs to be updated.
///
- (BOOL)setProjectIdWithProjectId:(NSString * _Nonnull)projectId error:(NSError * _Nullable * _Nullable)error;
/// Sending email for user id verification.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: identifier of the user identity. To verify identity this identifier needs to be valid email address.
///   </li>
///   <li>
///     authenticationSessionDetails: details for an authentication session.
///   </li>
///   <li>
///     completionHandler: a closure called when the verification has been completed. It can contain a verification response object or an optional error object.
///   </li>
/// </ul>
- (void)sendVerificationEmailWithUserId:(NSString * _Nonnull)userId authenticationSessionDetails:(AuthenticationSessionDetails * _Nullable)authenticationSessionDetails completionHandler:(void (^ _Nonnull)(VerificationResponse * _Nullable, NSError * _Nullable))completionHandler;
/// The method confirms user verification and as a result, an activation token is obtained. This activation token should be used in the registration process.
/// \param verificationURL a verification URL received as part of the verification process.
///
/// \param completionHandler a closure called when the verification has been confirmed. It can contain an optional ActivationTokenResponse object and an optional error object.
///
- (void)getActivationTokenWithVerificationURL:(NSURL * _Nonnull)verificationURL completionHandler:(void (^ _Nonnull)(ActivationTokenResponse * _Nullable, NSError * _Nullable))completionHandler;
/// The method confirms user verification and as a result, an activation token is obtained. This activation token should be used in the registration process.
/// \param userId identifier of the user.
///
/// \param code the verification code sent to the user email.
///
/// \param completionHandler a closure called when the verification has been confirmed. It can contain an optional ActivationTokenResponse object and an optional error object.
///
- (void)getActivationTokenWithUserId:(NSString * _Nonnull)userId code:(NSString * _Nonnull)code completionHandler:(void (^ _Nonnull)(ActivationTokenResponse * _Nullable, NSError * _Nullable))completionHandler;
/// Generate <a href="https://miracl.com/resources/docs/guides/built-in-user-verification/quickcode/">QuickCode</a> for a registered user.
/// \param user the user to generate <code>QuickCode</code> for.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the <code>QuickCode</code> has been generated. It can contain a generated QuickCode object or an optional error object.
///
- (void)generateQuickCodeWithUser:(User * _Nonnull)user didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(QuickCode * _Nullable, NSError * _Nullable))completionHandler;
/// Creates a new identity in the MIRACL platform.
/// \param userId an identifier of the user (e.g email address).
///
/// \param activationToken a token obtained during the user verification process indicating that the user has been already verified.
///
/// \param pushNotificationsToken current device push notifications token. This is used when push notifications for authentication
/// are enabled in the platform.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when creating a new identity has finished. It can contain an error object or the User where both of them are optional objects.
///
- (void)registerFor:(NSString * _Nonnull)userId activationToken:(NSString * _Nonnull)activationToken pushNotificationsToken:(NSString * _Nullable)pushNotificationsToken didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completionHandler;
/// Authenticate identity to the MIRACL Trust platform by generating a <a href="https://jwt.io">JWT</a>
/// authentication token.
/// Use this method to authenticate within your application.
/// After the JWT authentication token is generated, it needs to be sent to the application
/// server for verification. When received, the application server should verify the
/// token signature using the MIRACL Trust <a href="https://api.mpin.io/.well-known/jwks">JWKS</a>
/// endpoint and the <code>audience</code> claim which in this case is the application project ID.
/// \param user object that keeps an authentication identity in it.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the JWT is generated. It can contain an optional JWT token or an optional error object.
///
- (void)authenticateWithUser:(User * _Nonnull)user didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Authenticates identity in the MIRACL platform.
/// Use this method to authenticate another device or application with the usage of QR Code
/// presented on MIRACL login page.
/// \param user object that keeps an authentication identity in it.
///
/// \param qrCode a string read from the QR code.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the identity is authenticated. It can contain a boolean flag representing the result of the authentication or an optional error object.
///
- (void)authenticateWithUser:(User * _Nonnull)user qrCode:(NSString * _Nonnull)qrCode didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Authenticates identity in the MIRACL platform.
/// Use this method when you want to authenticate another device or application with the usage of Push
/// notifications sent by a MIRACL platform.
/// \param payload payload dictionary received from push notification.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the identity is authenticated. It can contain a boolean flag representing the result of the authentication or an optional error object.
///
- (void)authenticateWithPushNotificationPayload:(NSDictionary * _Nonnull)payload didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Authenticates identity in the MIRACL platform.
/// Use this method to authenticate another device or application with the usage of
/// Universal Link created by a MIRACL platform.
/// \param user object that keeps an authentication identity in it.
///
/// \param universalLinkURL universal link for authentication.
///
/// \param didRequestPinHandler a closure called when the PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the identity is authenticated. It can contain a boolean flag representing the result of the authentication or an optional error object.
///
- (void)authenticateWithUser:(User * _Nonnull)user universalLinkURL:(NSURL * _Nonnull)universalLinkURL didRequestPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestPinHandler completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Get <code>authentication</code> session details from MIRACL’s platform based on session identifier.
/// Use this method to get session details for application that tries to authenticate
/// against MIRACL Platform with the help of QR Code.
/// \param qrCode a string read from the QR code.
///
/// \param completionHandler a closure called when the authentication session details are fetched.It can contain a newly fetched authentication session details optional object
/// and an optional error object.
///
- (void)getAuthenticationSessionDetailsFromQRCode:(NSString * _Nonnull)qrCode completionHandler:(void (^ _Nonnull)(AuthenticationSessionDetails * _Nullable, NSError * _Nullable))completionHandler;
/// Get <code>authentication</code> session details from MIRACL’s platform based on session identifier.
/// Use this method to get authentication session details for application that tries to authenticate
/// against MIRACL Platform with the help of Universal Link URL.
/// \param universalLinkURL universal link for authentication.
///
/// \param completionHandler a closure called when the authentication session details are fetched.It can contain a newly fetched authentication session details optional object
/// and an optional error object.
///
- (void)getAuthenticationSessionDetailsFromUniversalLinkURL:(NSURL * _Nonnull)universalLinkURL completionHandler:(void (^ _Nonnull)(AuthenticationSessionDetails * _Nullable, NSError * _Nullable))completionHandler;
/// Get <code>authentication</code> session details from MIRACL’s platform based on session identifier.
/// Use this method to get authentication session details for application that tries to authenticate
/// against MIRACL Platform with the help of push notifications payload
/// \param pushNotificationPayload payload dictionary received from push notification.
///
/// \param completionHandler a closure called when the authentication session details are fetched.It can contain a newly fetched authentication session details optional object
/// and an optional error object.
///
- (void)getAuthenticationSessionDetailsFromPushNotificationPayload:(NSDictionary * _Nonnull)pushNotificationPayload completionHandler:(void (^ _Nonnull)(AuthenticationSessionDetails * _Nullable, NSError * _Nullable))completionHandler;
/// Cancel the authentication session by its <code>SessionDetails</code> object
/// \param authenticationSessionDetails details for authentication session, that is in progress.
///
/// \param completionHandler a closure called when the authentication session is aborted. It can contain a boolean flag representing the result of the abortion and an optional error object.
///
- (void)abortAuthenticationSession:(AuthenticationSessionDetails * _Nonnull)authenticationSessionDetails completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Get <code>signing</code> session details from MIRACL’s platform based on session identifier.
/// Use this method to get signing session details for application that tries to sign against MIRACL Platform with the usage of QR Code.
/// \param qrCode a string read from the QR code.
///
/// \param completionHandler a closure called when the session details are fetched.It can contain a newly fetched <code>signing</code> session details optional object
/// and an optional error object.
///
- (void)getSigningSessionDetailsFromQRcode:(NSString * _Nonnull)qrCode completionHandler:(void (^ _Nonnull)(SigningSessionDetails * _Nullable, NSError * _Nullable))completionHandler;
/// Get <code>signing</code> session details from MIRACL’s platform based on session identifier.
/// Use this method to get signing session details for application that tries to sign against MIRACL Platform with the usage of Universal Link URL.
/// \param universalLinkURL universal link for signing.
///
/// \param completionHandler a closure called when the session details are fetched.It can contain a newly fetched <code>signing</code> session details optional object
/// and an optional error object.
///
- (void)getSigningSessionDetailsFromUniversalLinkURL:(NSURL * _Nonnull)universalLinkURL completionHandler:(void (^ _Nonnull)(SigningSessionDetails * _Nullable, NSError * _Nullable))completionHandler;
/// Cancel the signing session by its <code>SigningSessionDetails</code> object
/// \param signingSessionDetails details for signing session, that is in progress.
///
/// \param completionHandler a closure called when the signing session is aborted. It can contain a boolean flag representing the result of the abortion and an optional error object.
///
- (void)abortSigningSession:(SigningSessionDetails * _Nonnull)signingSessionDetails completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Create a cryptographic signature of a given document.
/// \param message the hash of a given document.
///
/// \param user an already registered user with signing identity.
///
/// \param didRequestSigningPinHandler a closure called when the signing identity PIN code is needed from the SDK. It can be used to show UI for entering the PIN code. Its parameter is another closure that is mandatory to be called after the user finishes their action.
///
/// \param completionHandler a closure called when the signing has completed. It can contain a newly created <code>SigningResult</code> object and an optional error object.
///
- (void)signWithMessage:(NSData * _Nonnull)message user:(User * _Nonnull)user didRequestSigningPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestSigningPinHandler completionHandler:(void (^ _Nonnull)(SigningResult * _Nullable, NSError * _Nullable))completionHandler;
- (void)_signWithMessage:(NSData * _Nonnull)message user:(User * _Nonnull)user signingSessionDetails:(SigningSessionDetails * _Nonnull)signingSessionDetails didRequestSigningPinHandler:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nullable)))didRequestSigningPinHandler completionHandler:(void (^ _Nonnull)(SigningResult * _Nullable, NSError * _Nullable))completionHandler;
/// Get a registered user.
/// \param userId id of the user. Can be email or any other string.
///
///
/// returns:
/// User object from the database. Returns nil if there is no such object in the storage.
- (User * _Nullable)getUserBy:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Delete a registered user.
/// \param user object that needs to be deleted.
///
- (BOOL)deleteWithUser:(User * _Nonnull)user error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSDate;

SWIFT_CLASS("_TtC11MIRACLTrust9QuickCode")
@interface QuickCode : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
@property (nonatomic, readonly, copy) NSDate * _Nonnull expireTime;
@property (nonatomic, readonly) NSInteger ttlSeconds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11MIRACLTrust9Signature")
@interface Signature : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull mpinId;
@property (nonatomic, readonly, copy) NSString * _Nonnull U;
@property (nonatomic, readonly, copy) NSString * _Nonnull V;
@property (nonatomic, readonly, copy) NSString * _Nonnull publicKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull dtas;
@property (nonatomic, readonly, copy) NSString * _Nonnull signatureHash;
- (NSDictionary<NSString *, NSString *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Result returned by <code>MIRACLTrust/MIRACLTrust/sign(message:user:signingSessionDetails:didRequestSigningPinHandler:completionHandler:)</code> method.
SWIFT_CLASS("_TtC11MIRACLTrust13SigningResult")
@interface SigningResult : NSObject
/// Cryptographic representation of the signature
@property (nonatomic, readonly, strong) Signature * _Nonnull signature;
/// When the document has been signed.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SigningSessionStatus : NSInteger;

/// Object representing details from incoming signing session.
SWIFT_CLASS("_TtC11MIRACLTrust21SigningSessionDetails")
@interface SigningSessionDetails : NSObject <SessionDetails>
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectName;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectLogoURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly) NSInteger pinLength;
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull verificationCustomText;
@property (nonatomic, readonly, copy) NSString * _Nonnull identityTypeLabel;
@property (nonatomic, readonly) BOOL quickCodeEnabled;
@property (nonatomic, readonly) BOOL limitQuickCodeRegistration;
@property (nonatomic, readonly) enum IdentityType identityType;
/// Identifier of the signing session.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Hash of the transaction that needs to be signed.
@property (nonatomic, readonly, copy) NSString * _Nonnull signingHash;
/// Description of the transaction that needs to be signed.
@property (nonatomic, readonly, copy) NSString * _Nonnull signingDescription;
/// Status of the session.
@property (nonatomic, readonly) enum SigningSessionStatus status;
/// Date indicating if session is expired
@property (nonatomic, readonly, copy) NSDate * _Nonnull expireTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enumeration describing status of the signing session.
typedef SWIFT_ENUM(NSInteger, SigningSessionStatus, open) {
  SigningSessionStatusActive = 0,
  SigningSessionStatusSigned = 1,
};



/// Representing user in the MIRACL platform.
/// This user is having authentication and signing identities.
SWIFT_CLASS("_TtC11MIRACLTrust4User")
@interface User : NSObject
/// Identifier of the user (e.g email address)
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Identifier of the project in the MIRACL Trust platform.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly) BOOL revoked;
/// The number of the digits the identity PIN should be.
@property (nonatomic, readonly) NSInteger pinLength;
/// Hex encoded SHA256 representation of the mpinId property.
@property (nonatomic, readonly, copy) NSString * _Nonnull hashedMpinId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Possible verification methods that can be used for identity verification.
typedef SWIFT_ENUM(NSInteger, VerificationMethod, open) {
/// Custom identity verification, done with a client implementation.
  VerificationMethodFullCustom = 0,
/// Identity verification done by email.
  VerificationMethodStandardEmail = 1,
};


/// The response returned from <a href="x-source-tag://miracltrust-_FUNC_sendverificationemailuseridauthenticationsessiondetailscompletionhandler">sendVerificationEmail</a>.
SWIFT_CLASS("_TtC11MIRACLTrust20VerificationResponse")
@interface VerificationResponse : NSObject
/// Unix timestamp before a new verification email could be sent for the same user ID.
@property (nonatomic, readonly) int64_t backoff;
/// Indicates the method of the verification.
@property (nonatomic, readonly) enum EmailVerificationMethod method;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
